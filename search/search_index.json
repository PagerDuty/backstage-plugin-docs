{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome \ud83d\udc4b","text":"<p>If you are looking for documentation on how to use and configure the PagerDuty plugin for Backstage you are in the right place!</p> <p>Before you start let's just set our baseline straight and explain who we are and why we are doing this.</p>"},{"location":"#what-is-pagerduty","title":"What is PagerDuty?","text":""},{"location":"#were-revolutionizing-operations","title":"We're revolutionizing Operations","text":"<p>PagerDuty is transforming critical work for modern business. Our powerful and unique platform makes sure you can take the right action, when seconds matter. From developers and reliability engineers to customer success, security and the C-suite, we empower teams with the time and efficiency to build the future.</p>"},{"location":"#our-motto","title":"Our motto","text":"<p>Let's build the future!</p>"},{"location":"#our-mission","title":"Our mission","text":"<p>To revolutionize operations and build customer trust by anticipating the unexpected in an unpredictable world.</p>"},{"location":"#our-vision","title":"Our vision","text":"<p>An equitable world where we transform critical work so all teams can delight their customers and build trust.</p>"},{"location":"#what-is-backstage","title":"What is Backstage?","text":"<p>Backstage is an open platform for building developer portals. Powered by a centralized software catalog, Backstage restores order to your microservices and infrastructure and enables your product teams to ship high-quality code quickly \u2014 without compromising autonomy.</p> <p>Backstage unifies all your infrastructure tooling, services, and documentation to create a streamlined development environment from end to end.</p>"},{"location":"#why-backstage","title":"Why Backstage?","text":"<p>PagerDuty is a strong advocate of full-service ownership. Full-service ownership means that people take the responsibility for supporting the software they deliver, at every stage of its lifecycle. This level of ownership brings development teams much closer to their customers (internal or external), the business, and the value being delivered.</p> <p>We believe that Backstage is a key component of that process by being the platform that allows teams to provide documentation to their customers, provide visibility on how their services are behaving and exposing the dependencies between different components and teams.</p> <p>Backstage offers a single location where all the knowledge about services exists, and enables users to do it in a self-service way. This reduces interactions between teams, increasing their productivity and focus, allowing them to work on what is important to them.</p>"},{"location":"#the-plugin","title":"The plugin","text":"<p>The plugin was initially started by Backstage and then transitioned into PagerDuty. The plugin currently offers a PagerDuty card for:</p> <ul> <li>Displaying relevant PagerDuty information about an entity within Bacsktage, such as active incidents or recent changes.</li> <li>Quickly check who is on call for a service.</li> <li>Trigger an incident to the currently on call responder(s) for a service.</li> <li>Easily map PagerDuty Services to Backstage Entities.</li> </ul> <p>The scope for the plugin is quite limited at the time but we are working on bringing new features based on customer feedback. We welcome all feedback so if you have any bugs to report or feature requests to raise we THANK YOU.</p> <ul> <li>Frontend plugin (bugs) (feature requests)</li> <li>Backend plugin (bugs) (feature requests)</li> <li>Common library (bugs) (feature requests)</li> <li>Scaffolder Actions module (bugs) (feature requests)</li> <li>Entity Processor module (bugs) (feature requests)</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<p>We are working on some cool new features and capabilities. Here are some of them:</p> <ul> <li> Create scaffolder action to allow services to be created in PagerDuty</li> <li> Adding support for Scoped OAuth</li> <li> Improving UI for the existing PagerDuty Card</li> <li> Adding support for multiple PagerDuty accounts in the same Backstage instance</li> <li> Enabling service dependency sync between Backstage and PagerDuty</li> <li> Adding support for adding multiple services on the same card</li> <li> Adding support for a Team PagerDuty card</li> <li> And many more ...</li> </ul> <p>For more details on what is in progress and what we are considering refer to the project page on GitHub.</p>"},{"location":"capabilities/","title":"Plugin capabilities","text":"<p>The purpose of the PagerDuty plugin for Backstage is to bring some of the capabilities of PagerDuty into Backstage to reduce distractions and provide users more visibility on the status of each service.</p> <p>Currently the plugin provides a limited set of features that we view as the core capabilities used by Developers, Platform Engineers, SREs and other type of stakeholders. Theses are listed below.</p>"},{"location":"capabilities/#frontend","title":"Frontend","text":"<p>The frontend plugin (<code>@pagerduty/backstage-plugin</code>) allows users to add a PagerDuty Card to their service pages which provides the following set of features.</p>"},{"location":"capabilities/#quick-view-on-current-service-status","title":"Quick view on current service status","text":"<p>The plugin provides an easy mechanism to check the current status for the service, as well as some insights for the last 30 days and how well you are complying to Service Standards.</p> <p></p> <p>Note</p> <p>By hovering the mouse over the information button on Service Standards card you will see a list of all the Service Standards and whether you are compliant or not.</p> <p></p>"},{"location":"capabilities/#view-any-open-incidents","title":"View any open incidents","text":"<p>The plugin lists all open incidents on a specific service and allows you to navigate to the incident detail page in PagerDuty.</p> <p></p>"},{"location":"capabilities/#view-change-events-associated-to-a-service","title":"View change events associated to a service","text":"<p>See all recent changes sent to PagerDuty through integrations like GitHub, GitLab, Azure DevOps and many others. If your service is running into issues you can quickly identify recent changes that might be related to the root cause of the incident.</p> <p></p> <p>Note</p> <p>This feature is available with our PagerDuty AIOps add-on. If your account does not have support for change events you might see the following screen instead of a list of changes.</p> <p></p>"},{"location":"capabilities/#see-and-contact-on-call-staff","title":"See and contact on call staff","text":"<p>Quickly check who is on call for your service and reach out if necessary. The plugin allows you to see the escalation policy that the on-call user is assigned to and navigate to PagerDuty for more details.</p> <p></p>"},{"location":"capabilities/#trigger-an-incident-for-a-service","title":"Trigger an incident for a service","text":"<p>The PagerDuty plugin allows users to create incidents directly from Backstage. You only need to specify a description for the problem you are having with the service and an incident will be created in PagerDuty.</p> <p></p> <p>Note</p> <p>This feature can be disabled if you don't want users to create incidents manually from Backstage. To do so check the steps on how to enable read-only mode.</p>"},{"location":"capabilities/#map-existing-pagerduty-services-to-backstage-entities","title":"Map existing PagerDuty services to Backstage entities","text":"<p>The PagerDuty plugin for Backstage allows Admins to add a <code>PagerDutyPage</code> component to their Backstage installation in order to easily map their existing PagerDuty services to Backstage entities without the need to make code changes to the service configuration.</p> <p>Warning</p> <p>This feature currently supports 1:1 mapping between services and entities due to a limitation on the <code>PagerDutyCard</code> that only allows one service to be configured at a time.</p> <p></p> <p>This feature leverages the entity processor module to make the necessary updates to each Backstage entity configuration. The <code>PagerDutyPage</code> allows admins to see the status of each entity and decide wether to make the necessary change in source code to ensure the configuration is in sync.</p>"},{"location":"capabilities/#sync-service-dependencies-between-backstage-and-pagerduty","title":"Sync service dependencies between Backstage and PagerDuty","text":"<p>The PagerDuty plugin allows users to keep service dependencies in-sync between Backstage and PagerDuty in an automated way. This feature is disabled by default but you can easily enable it in the PagerDuty Advanced Configurations Page in <code>PagerDutyPage</code>.</p> <p></p> <p>This feature allows you to sync service dependencies from Backstage to PagerDuty, PagerDuty to Backstage or merge the dependencies from both sides.</p>"},{"location":"capabilities/#backend","title":"Backend","text":"<p>The backend plugin (<code>@pagerduty/backstage-plugin-backend</code>) enables additional security when using the PagerDuty APIs and enables easy adoption of PagerDuty best practices through custom Backstage Scaffolder actions.</p>"},{"location":"capabilities/#create-pagerduty-services-from-project-templates","title":"Create PagerDuty services from project templates","text":"<p>The PagerDuty backend plugin exposes a custom action that can be used in project templates to streamline the process of onboarding services into PagerDuty whenever a new service is created from a Backstage template.</p> <p></p> <p>Follow these steps to add the custom action to a template.</p> <p>Warning</p> <p>Alert Grouping requires certain capabilities available in AIOps and Event Intelligence which are present in certain licensing models only.</p> <p>If your account doesn't have these capabilities, alert grouping will sillently be ignored.</p>"},{"location":"capabilities/#the-future","title":"The future","text":"<p>We are actively working on new capabilities based on user feedback and requests. If you have ideas or bugs to report we appreciate that you use the project's Issues page and let us know.</p>"},{"location":"community/","title":"Community","text":"<p>PagerDuty plugin for Backstage is an open source project maintained by PagerDuty and contributed by PagerDuty employees and the Backstage community based on their availability.</p>"},{"location":"community/#support","title":"Support","text":"<p>If you need help with this plugin, please open an issue in GitHub (frontend, backend), reach out on the Backstage Discord server or PagerDuty's community forum.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>If you are interested in contributing to this project, please refer to our Contributing Guidelines.</p>"},{"location":"advanced/configure-api-url/","title":"Custom REST API URL","text":"<p>The default URL used for REST API requests is <code>https://api.pagerduty.com</code>. It is possible to override this URL through configuration. Add the following configuration to <code>app-config.yaml</code>:</p>"},{"location":"advanced/configure-api-url/#single-account","title":"Single Account","text":"<pre><code>pagerDuty:\n  apiBaseUrl: 'https://api.eu.pagerduty.com'\n</code></pre>"},{"location":"advanced/configure-api-url/#multiple-accounts","title":"Multiple Accounts","text":"<pre><code>pagerDuty:\n  accounts:\n  - id: ${PD_SUBDOMAIN}\n    isDefault: true\n    apiBaseUrl: 'https://api.eu.pagerduty.com'\n    ...\n</code></pre> <p>Note</p> <p>PagerDuty accounts based in Europe use a different URL so you need to override it here if that is your case.</p> <ul> <li>EU-based accounts: 'https://api.eu.pagerduty.com'</li> <li>US-based accounts: 'https://api.pagerduty.com'</li> </ul>"},{"location":"advanced/configure-events-url/","title":"Custom events URL","text":"<p>The default URL used for events is <code>https://events.pagerduty.com/v2</code>. It is possible to override this URL through configuration. Add the following configuration to <code>app-config.yaml</code>:</p>"},{"location":"advanced/configure-events-url/#single-account","title":"Single Account","text":"<pre><code>pagerDuty:\n  eventsBaseUrl: 'https://events.pagerduty.com/v2'\n</code></pre>"},{"location":"advanced/configure-events-url/#multiple-accounts","title":"Multiple Accounts","text":"<pre><code>pagerDuty:\n  accounts:\n  - id: ${PD_SUBDOMAIN}\n    isDefault: true\n    eventsBaseUrl: 'https://events.pagerduty.com/v2'\n    ...\n</code></pre> <p>Note</p> <p>PagerDuty accounts based in Europe use a different URL so you need to override it here if that is your case.</p> <p>The correct url can be found in the Backstage integration page for your service on the PagerDuty console.</p> <p></p>"},{"location":"advanced/configure-service-dependency-sync/","title":"Configure service dependency sync","text":"<p>The PagerDuty plugin allows users, that use Backstage are their service catalog, to sync the dependencies automatically to the corresponding PagerDuty services.</p> <p>This feature is very powerfull for users that want to leverage PagerDuty Status Pages properly but are limited by the fact that they don't have service dependencies configured in PagerDuty. With this feature, the plugin will do this automatically for you.</p> <p>Note</p> <p>Only the Backstage entities that have corresponding services in PagerDuty will get their service dependencies mapped. This feature is powered by the <code>CatalogProcessor</code> and therefore if you make changes on your Backstage entity configuration they will, in time, be mapped to PagerDuty.</p> <p>These changes might not reflect immediatelly because the <code>CatalogProcessor</code> runs on a schedule and the plugin doesn't have control over that. Backstage admins can configure the frequency in which the entities are processed.</p> <p>This feature is disabled by default but can easily be enabled on the PagerDuty advanced configuration page. If you haven't enabled it yet you can do so by following the instructions in here.</p> <p></p> <p>Here you can choose:</p> <ul> <li>to use Backstage as the main source and the plugin will automatically add/remove service dependencies to your mapped entities in PagerDuty</li> <li>to set PagerDuty as the main source and the plugin will automatically add/remove entity relations in Backstage</li> <li>to merge service dependencies from Backstage and PagerDuty</li> <li>to keep it disabled.</li> </ul> <p>Note</p> <p>The syncing mechanism will overwrite all services on the destination so use this mechanism carefully.</p> <p>Example: You set Backstage as your main source and you already have service dependencies in PagerDuty. Those will be overwritten has Backstage is now configured as the source of thruth.</p>"},{"location":"advanced/create-service-software-template/","title":"Create PagerDuty service with Software Templates","text":"<p>The PagerDuty backend plugin provides a custom action that you can use in your Backstage Software Templates to create services in PagerDuty easily. This custom action not only creates the service, but also automatically configures a Backstage integration and adds its integration key to the Backstage Service configuration.</p> <p>By doing so, it enables and configures the PagerDuty Card provided by the frontend plugin directly on your service page, eliminating the need for manual configuration and enhancing the user experience.</p>"},{"location":"advanced/create-service-software-template/#adding-the-scaffolder-actions-plugin","title":"Adding the Scaffolder Actions plugin","text":"<p>Note</p> <p>Version 0.6.0 of <code>@pagerduty/backstage-plugin-backend</code> introduced support for the Backstage's new backend system which forced the extraction of the scaffolder actions to a separate package (@pagerduty/backstage-plugin-scaffolder-actions).</p> <p>If you were already using the scaffolder actions before this, follow the migration guide here as you need to update the package used in the code.</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-scaffolder-actions # (1)!\n</code></pre> <ol> <li>This command adds <code>@pagerduty/backstage-plugin-scaffolder</code> package to the <code>packages/backend</code> folder because it is a backend module.</li> </ol>"},{"location":"advanced/create-service-software-template/#adding-the-custom-action-to-the-project","title":"Adding the custom action to the project","text":"<p>You can add the custom action to the project in two different ways. Using the legacy backend system or the new backend system. Follow one of the approaches detailed below.</p>"},{"location":"advanced/create-service-software-template/#legacy-backend-system","title":"Legacy backend system","text":"<p>Backstage Scaffolder capabilities can be extended with custom actions that support Software Templates. For that to happen you need to update <code>packages/backend/src/plugins/scaffolder.ts</code> and add custom actions.</p> <p>Now, the list of scaffolder actions cannot be appended so you need re-create it and append your custom action. Otherwise all actions will be replaced just with yours.</p> <pre><code>// Add imports\nimport { createBuiltinActions } from '@backstage/plugin-scaffolder-backend';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { createPagerDutyServiceAction } from '@pagerduty/backstage-plugin-scaffolder-actions';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise&lt;Router&gt; {\n\n  ...\n\n  // Pull integrations\n  const integrations = ScmIntegrations.fromConfig(env.config);\n\n  // Rebuild built-in actions\n  const builtInActions = createBuiltinActions({\n    integrations,\n    catalogClient,\n    config: env.config,\n    reader: env.reader,\n  });\n\n  // Append PagerDuty custom action to the list\n  const actions = [\n    ...builtInActions, \n    createPagerDutyServiceAction()\n  ];\n\n  // Add new action list to the scaffolder\n  return await createRouter({\n    actions,                // this is the only update needed on this list\n    logger: env.logger,\n    config: env.config,\n    database: env.database,\n    reader: env.reader,\n    catalogClient,\n    identity: env.identity,\n    permissions: env.permissions,\n  });\n}\n</code></pre> <p>This step registers the custom action with the Scaffolder and allows it to be used in the Software template which you will configure on next step.</p>"},{"location":"advanced/create-service-software-template/#new-backend-system","title":"New backend system","text":"<p>Backstage's new backend system simplifies the configuration of backend plugins and requires less code to setup plugins. To add the PagerDuty scaffolder actions to your Backstage application add the following in <code>packages/backend/src/index.ts</code>.</p> <pre><code>backend.add(import('@pagerduty/backstage-plugin-scaffolder-actions'));\n</code></pre>"},{"location":"advanced/create-service-software-template/#adding-the-custom-action-to-a-software-template","title":"Adding the custom action to a Software Template","text":"<p>Software Templates can be simple or complex depending on the practices you are trying to standardize across your teams. Here, we provide a simple example of a template that requests basic information for a Backstage service and augments that with information relevant for creating the service in PagerDuty.</p> <p>Note</p> <p>We assume you have an <code>examples/template/content</code> folder which is automatically create when you use <code>npx @backstage/create-app</code> to create your Backstage project.</p>"},{"location":"advanced/create-service-software-template/#create-project-configuration-file","title":"Create project configuration file","text":"<p>In your <code>examples/template/content</code> folder you should create <code>catalog-info.yaml</code> file if you don't have one already. Update its content to something like this:</p> <pre><code>apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: ${{ values.name | dump }}\n  annotations:\n    pagerduty.com/integration-key: ${{ values.integrationKey | dump }}\n    pagerduty.com/service-id: ${{ values.serviceId | dump }}\n    pagerduty.com/account: ${{ values.account | dump }}\nspec:\n  type: website\n  lifecycle: experimental\n  owner: guests\n</code></pre> <p>In the software template we will either replace the values for the <code>integration-key</code>, <code>service-id</code>, <code>account</code> and <code>name</code> or completely remove the parameters from the configuration.</p> <p>Note</p> <p>You don't need to use this exact template but to automate the configuration for the PagerDuty Card you need to have at least the <code>integration-key</code> or the <code>service-id</code> parameters.</p>"},{"location":"advanced/create-service-software-template/#create-the-software-template","title":"Create the Software Template","text":"<p>Now that we have defined the contents of the new project we will be creating through a Software Template, we need to create the template itself.</p> <p>Software templates are composed of input parameters, steps and outputs. In the following template we provide the user with two pages:</p> <ol> <li>Collecting information about the service itself</li> <li>Collecting information on where the code is going to be hosted</li> </ol> <p>Once all the information is provided by the user we will:</p> <ol> <li>create a Service in PagerDuty</li> <li>parse the <code>catalog-info.yaml</code> file and replace the variables with the values generated by the previous step</li> <li>publish the code to GitHub</li> <li>register the component in Backstage</li> </ol> <p>Note</p> <p>For the following template to work, you need to configure the <code>apiToken</code> in <code>app-config.yaml</code> file. If you haven't done so, follow the steps in Configure Backend plugin API credentials</p> <p>Note: If you don't setup this property in your configuration, the backend plugin will fail to start.</p> <p>Note</p> <p>The UI component that allows users to select the Escalation Policy when creating a new service in PagerDuty depends on an open source component. For the template to work properly please install it before.</p> <pre><code>yarn add --cwd packages/app @roadiehq/plugin-scaffolder-frontend-module-http-request-field\n</code></pre> <p>Once it is installed, go to <code>/packages/app/src/App.tsx</code> and find <code>&lt;ScaffolderPage /&gt;</code>. Add the UI component to <code>ScaffolderFieldExtensions</code>. It should look like this when you finish.</p> <pre><code>import { ScaffolderFieldExtensions } from '@backstage/plugin-scaffolder-react';\nimport { SelectFieldFromApiExtension } from '@roadiehq/plugin-scaffolder-frontend-module-http-request-field';\n\n...\n\n&lt;Route path=\"/create\" element={&lt;ScaffolderPage /&gt;}&gt;\n  &lt;ScaffolderFieldExtensions&gt;\n    &lt;SelectFieldFromApiExtension /&gt;\n  &lt;/ScaffolderFieldExtensions&gt;\n&lt;/Route&gt;\n</code></pre> <p>Once all requirements are in-place, create a <code>template.yaml</code> file under <code>examples/template</code> and copy the following code in there.</p> <pre><code>apiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: create-pagerduty-service\n  title: Create PagerDuty Service\n  description: Creates service in PagerDuty\nspec:\n  owner: pagerduty\n  type: service\n\n  parameters:\n    - title: PagerDuty Service\n      required:\n        - service_name\n        - description\n        - escalation_policy_id\n      properties:\n        service_name:\n          title: Service Name\n          type: string\n          description: The name of the service\n        description:\n          title: Description\n          type: string\n          description: The description of the service\n        escalation_policy_id:\n          title: Escalation Policy ID\n          type: string\n          description: The ID of the escalation policy to associate with the service\n          ui:field: SelectFieldFromApi #(1)!\n          ui:options: #(2)!\n            title: PagerDuty Escalation Policy\n            description: Select an escalation policy from PagerDuty\n            path: 'pagerduty/escalation_policies' #(3)!\n            labelSelector: 'label'\n            valueSelector: 'value'\n            placeholder: '---'\n        alert_grouping: #(4)!\n          title: Alert Grouping\n          type: string\n          description: Reduce noise by grouping similar alerts - Defaults to 'None'.\n          enum:\n            - 'time'\n            - 'intelligent'\n            - 'content_based'\n          enumNames:\n            - 'Time-based grouping'\n            - 'Intelligent grouping'\n            - 'Content-based grouping'\n\n    - title: Choose a location\n      required:\n        - repoUrl\n      properties:\n        repoUrl:\n          title: Repository Location\n          type: string\n          ui:field: RepoUrlPicker\n          ui:options:\n            allowedHosts:\n              - github.com\n\n  steps:\n    - id: pagerdutyService\n      name: Create PagerDuty Service\n      action: pagerduty:service:create\n      input:\n        name: ${{ parameters.service_name }}\n        description: ${{ parameters.description }}\n        escalationPolicyId: ${{ parameters.escalation_policy_id }}\n        alertGrouping: ${{ parameters.alert_grouping }} #(5)!\n\n    - id: fetch-base\n      name: Fetch Base\n      action: fetch:template\n      input:\n        url: ./content\n        templateFileExtension: '.yaml'\n        values:\n          name: ${{ parameters.service_name }}\n          serviceId: ${{ steps['pagerdutyService'].output.serviceId }}\n          integrationKey: ${{ steps['pagerdutyService'].output.integrationKey }}\n          account: ${{ steps['pagerdutyService'].output.account }}\n\n    - id: publish\n      name: Publish\n      action: publish:github\n      input:\n        allowedHosts: ['github.com']\n        description: This is ${{ parameters.name }}\n        repoUrl: ${{ parameters.repoUrl }}\n\n    - id: register\n      name: Register\n      action: catalog:register\n      input:\n        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}\n        catalogInfoPath: '/catalog-info'\n\n  output:\n    links:\n      - title: Open in PagerDuty\n        url: ${{ steps['pagerdutyService'].output.serviceUrl }}\n    text:\n      - title: Integration Key\n        text: ${{ steps['pagerdutyService'].output.integrationKey }}\n</code></pre> <ol> <li>Open source dropdown component from <code>@roadiehq</code> that queries data from a local API</li> <li>Options for the dropdown component</li> <li>The local api exposed by the PagerDuty backend plugin that retrieves a list of key/value pairs</li> <li>This UI field is optional. If you want to enforce a specific method you can just set the value in the backend component.</li> <li>This parameter is optional. You can enforce a specific method by choosing 'intelligent', 'time' or 'content_based'. If not defined, no alert grouping will be configured.    Requires AIOps.</li> </ol> <p>This is an easy mechanism for onboarding new services in an automated way, ensuring that Backstage and PagerDuty services can be provisioned with one step and in a self-service way.</p>"},{"location":"advanced/enable-read-only-mode/","title":"Enable read-only mode","text":"<p>The PagerDuty plugin allows users to create incidents directly from Backstage. This feature is enabled by default but you can choose to disable it.</p> <p></p>"},{"location":"advanced/enable-read-only-mode/#component-read-only-mode","title":"Component read-only mode","text":"<p>To suppress the rendering of the actionable incident creation button, the <code>PagerDutyCard</code> can be instantiated in <code>readOnly</code> mode as shown below.</p> <pre><code>&lt;EntityPagerDutyCard readOnly&gt;\n</code></pre> <p>This will hide the button for all users and prevent incidents from being created from Backstage.</p> <p></p>"},{"location":"advanced/hide-change-events/","title":"Hide change events","text":"<p>The PagerDuty plugin allows users to view the recent changes made to components integrated with their PagerDuty service. This feature is enabled by default but you can choose to disable it.</p> <p></p> <p>Note</p> <p>In order to ingest change events in PagerDuty you need to have an AIOps license. If you don't have one, or you are missing the necessary permissions, you will see the following error.</p> <p></p> <p>This is one of the reasons why users might want to disable this capability. PagerDuty has decided not to hide the tab automatically due to its relevance in the incident operations process.</p>"},{"location":"advanced/hide-change-events/#how-to-hide-the-change-events-tab","title":"How to hide the Change Events tab?","text":"<p>To suppress the rendering of the change events tab, the <code>PagerDutyCard</code> can be instantiated with a <code>disableChangeEvents</code> option as shown below.</p> <pre><code>&lt;EntityPagerDutyCard disableChangeEvents&gt;\n</code></pre> <p>This will hide the change events tab for all users and prevent recent changes from being visible in Backstage.</p> <p></p>"},{"location":"advanced/hide-insights/","title":"Hide 'insights' section","text":"<p>The PagerDuty plugin allows users to view relevant metrics for the service. This feature is enabled by default but you can choose to completely hide it.</p> <p>Note</p> <p>This capability is only available for the <code>PagerDutySmallCard</code> at this point in time.</p> <p></p> <p>To suppress the rendering of the insights section, the <code>PagerDutySmallCard</code> can be instantiated with a <code>disableInsights</code> option as shown below.</p> <pre><code>&lt;EntityPagerDutySmallCard disableInsights&gt;\n</code></pre> <p>This will hide the insights tab for Backstage users.</p> <p></p>"},{"location":"advanced/hide-oncall/","title":"Hide 'on-call' section","text":"<p>The PagerDuty plugin allows users to view who is currently on-call for the escalation policy assigned to the service. This feature is enabled by default but you can choose to completely hide it.</p> <p></p> <p>To suppress the rendering of the on-call section, the <code>PagerDutyCard</code> can be instantiated with a <code>disableOnCall</code> option as shown below.</p> <pre><code>&lt;EntityPagerDutyCard disableOnCall&gt;\n</code></pre> <p>This will hide the on-call tab for Backstage users.</p> <p></p> <p>Note</p> <p>This feature is also available for other cards such as <code>PagerDutySmallCard</code>.</p> <pre><code>&lt;EntityPagerDutySmallCard disableOnCall&gt;\n</code></pre> <p></p>"},{"location":"advanced/homepage-component/","title":"Create an homepage component","text":"<p>The most common use case for the plugin is to have an instance of the plugin in each service. Still, you might want to have multiple instances of the plugin in your homepage to provide visibility on multiple services at the same time.</p> <p>Warning</p> <p>The <code>PagerDutyHomepageCard</code> has not yet been updated to match the new UI of the <code>PagerDutyCard</code> released on version <code>0.10.0</code> of the frontend plugin.</p> <p>If that is your case you might want to leverage the <code>PagerDutyHomepageCard</code> component like so.</p> <pre><code>...\nexport const homePage = (\n  &lt;Page themeId=\"home\"&gt;\n    ...\n    &lt;Content&gt;\n      &lt;CustomHomepageGrid config={defaultConfig}&gt;\n        ...\n        &lt;PagerDutyHomepageCard\n          name=\"My Service\"\n          serviceId=\"&lt;service-id&gt;\"\n          integrationKey=\"&lt;integration-key&gt;\"\n          readOnly={false}\n        /&gt;\n      &lt;/CustomHomepageGrid&gt;\n    &lt;/Content&gt;\n  &lt;/Page&gt;\n);\n</code></pre> <p>This component requires you to specify the <code>service-id</code> and <code>integration-key</code> properties which allows for added flexibility.</p> <p>Note</p> <p>We are aware that this scenario is not ideal as the homepage will be full of different components and will be difficult to navigate on and for that reason we are working on a component that provides an aggregated view on multiple services.</p> <p>Until we release that capability this is the best option if you want to provide visibility on multiple services on the same page.</p>"},{"location":"advanced/service-entity-mapping/","title":"Mapping PagerDuty Services to Backstage Entities","text":"<p>Users of PagerDuty plugin for Backstage are typically customers of PagerDuty that have started to use Backstage as their Internal Developer Portal. This means they start from an existing base of PagerDuty services that they need to manually configure to have them show up in Backstage.</p> <p>This can of course be automated through the use of PagerDuty's APIs but it's still something that requires human effort and for some teams it is difficult to justify the investment.</p> <p>For that reason we create a <code>PagerDutyPage</code> component that is intended to be the single place for advanced configurations related to this plugin.</p> <p>At this point in time the <code>PagerDutyPage</code> only allows Admins to map existing PagerDuty services to Backstage entities. Other features will be released in the future.</p>"},{"location":"advanced/service-entity-mapping/#installing-dependencies","title":"Installing dependencies","text":"<p>In order to set this up in your Backstage instance you should install the necessary packages first by running the following command. This command will install the entity processor module that we will configure later on.</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-entity-processor\n</code></pre> <p>Note</p> <p>The following instructions assume that you already installed the frontend and backend plugin as described in the Getting Started page.</p>"},{"location":"advanced/service-entity-mapping/#configuring-the-entity-processor","title":"Configuring the Entity Processor","text":"<p>The Entity Processor module is one of the key components of this capability as it allows for entity mapping configurations that were persisted into the Backstage database to be applied to each Backstage entity configuration.</p> <p>You can enable the entity processor in your Backstage instance by injecting the dependency in the backend system in <code>packages/backend/index.ts</code>.</p> <pre><code>  import { createBackend } from '@backstage/backend-defaults';\n\n  const backend = createBackend();\n\n  ...\n\n  backend.add(import('@pagerduty/backstage-plugin-entity-processor')); // &lt;-- This is the line you want to add\n\n  backend.start();\n</code></pre> <p>And that is it for the entity processor module. This module will process all Backstage entities and if there are any changes persisted to the database they will be applied automatically.</p>"},{"location":"advanced/service-entity-mapping/#adding-the-pagerdutypage-component","title":"Adding the PagerDutyPage component","text":"<p>Now that we have taken care of the backend configurations we need to expose the mapping features to the Backstage Admins. You do this in two steps.</p> <ol> <li>Add a route to the new page that will contain the <code>PagerDutyPage</code> component</li> </ol> <p>In <code>packages/app/src/App.tsx</code> import the <code>PagerDutyPage</code> component from <code>@pagerduty/backstage-plugin</code> by using the following command.</p> <pre><code>  import { PagerDutyPage } from '@pagerduty/backstage-plugin';\n</code></pre> <p>Add a new route to your routes list.</p> <pre><code>    const routes = (\n    &lt;FlatRoutes&gt;\n      ...\n      &lt;Route path=\"/pagerduty\" element={&lt;PagerDutyPage /&gt;} /&gt;\n    &lt;/FlatRoutes&gt;\n  );\n</code></pre> <ol> <li>Add the PagerDuty option to the navigation menu</li> </ol> <p>In <code>packages/app/src/components/Root/Root.tsx</code> import the <code>PagerDutyIcon</code> component from <code>@pagerduty/backstage-plugin</code> by using the following command.</p> <pre><code>  import { PagerDutyIcon } from '@pagerduty/backstage-plugin';\n</code></pre> <p>Add the menu option to navigate to the new /pagerduty route.</p> <pre><code>    export const Root = ({ children }: PropsWithChildren&lt;{}&gt;) =&gt; (\n    &lt;SidebarPage&gt;\n      &lt;Sidebar&gt;\n        ...\n        &lt;SidebarGroup label=\"Menu\" icon={&lt;MenuIcon /&gt;}&gt;\n          ...\n          &lt;SidebarItem icon={PagerDutyIcon} to=\"pagerduty\" text=\"PagerDuty\" /&gt;\n          ...\n        &lt;/SidebarGroup&gt;\n      &lt;/Sidebar&gt;\n      {children}\n    &lt;/SidebarPage&gt;\n  );\n</code></pre> <p>Now, Backstage Admins will have the option to configure the mapping between PagerDuty services and Backstage entities using a UI.</p>"},{"location":"advanced/service-entity-mapping/#mapping-services-to-entities","title":"Mapping services to entities","text":"<p>Once you navigate to the new <code>/pagerduty</code> route will see a page similar to the one below. On the table you will see a list of all your PagerDuty services, it's current mapping and the mapping status.</p> <p></p> <p>To define the mapping between existing PagerDuty services and Backstage entities you need to select the edit option on the right. Once you do so, a new modal screen will pop-up. Here, you can choose from a list of available Backstage entities that you want to map to the PagerDuty service.</p> <p>Warning</p> <p>Currently we only support 1:1 mapping between PagerDuty services and Backstage entities due to a limitation on the <code>PagerDutyCard</code> that only supports one service at a time. There is work in progress to overcome this limitation.</p> <p></p> <p>Once you select a new mapping, Backstage Entity Processor will be instructed to run and update the Backstage entity configuration. This is a best-effort action and the configuration update might not be immediate.</p>"},{"location":"advanced/service-entity-mapping/#check-mapping-status","title":"Check mapping status","text":"<p>Mappings defined on this page are not persisted to source code but instead kept in Backstage database. For this reason, we allow you to check the mapping status for each PagerDuty service. The status might take one of the following values:</p> <ul> <li>In Sync: The PagerDuty configurations on the Backstage entity are in sync between the database and the configuration file.</li> <li>Out of Sync: The configurations in the database and the configuration file do not match. In this occasion, the values from the database will take precedence as they are considered to be overrides.</li> <li>Not Mapped: The PagerDuty service is not mapped to any Backstage entity.</li> </ul> <p>With this information the user can chose whether to manually persist the override to the source code and therefore ensure the configuration is in sync.</p> <p>Note</p> <p>We are evaluating an option to automatically create a PR in the source repo for the Backstage entity to ease the process of ensuring that configurations are in sync. Still, this feature is not available yet.</p> <p>And there you go. This is all you need to do to map your existing PagerDuty services to Backstage entities in an easier manner.</p>"},{"location":"components/pagerduty-card/","title":"PagerDutyCard Component","text":"<p>The <code>PagerDutyCard</code> is the standard component that you can add to the Entity page. This card allows you to:</p> <ul> <li>check the status of your service</li> <li>access relevant service metrics</li> <li>track service standards compliance</li> <li>see all active incidents and recent changes</li> <li>check who is on call</li> <li>open service and incidents in PagerDuty</li> <li>create new incidents</li> </ul> <p></p> <p>You can add the <code>PagerDutyCard</code> to your Backstage application easily by following the steps highlighted in Configuring Backstage.</p> <p>The on call and change events tabs can be removed from the Card by following the steps detailed in hide change events and hide on call.</p> <p>You can optionally also disable the chance to create new incidents from the card by making it <code>read-only</code>. Refer to the documentation to see how to do it.</p>"},{"location":"components/pagerduty-page/","title":"PagerDutyPage Component","text":"<p>The <code>PagerDutyPage</code> is a Page component that Backstage Admins can add to the Backstage menu. This page is the entry point for advanced configurations related to the PagerDuty plugin for Backstage. Using this component you can:</p> <ul> <li>map existing PagerDuty services to Backstage entities</li> <li>see the synchronization status between your configuration file and overrides done on this page</li> </ul> <p></p> <p>You can add <code>PagerDutyPage</code> to your Backstage application easily by following the steps highlighted in Mapping PagerDuty Services to Backstage Entities.</p>"},{"location":"components/pagerduty-small-card/","title":"PagerDutySmallCard Component","text":"<p>The PagerDutySmallCard is a component initially contributed by community members that you can add to the Entity page. This card presents similar information to PagerDutyCard but in a smaller form factor. It allows you to:</p> <ul> <li>check the status of your service</li> <li>access relevant service metrics</li> <li>track service standards compliance</li> <li>check who is on call</li> <li>open the service in PagerDuty</li> <li>create new incidents</li> </ul> <p></p> <p>This card doesn't show any incidents or recent changes as the idea is to be able to quickly the service status and use as less space on the screen as possible. For this reason we moved the insights and on call sections into collapsable panels that can be expanded when needed.</p> <p></p> <p>You can add the PagerDutySmallCard to your Backstage application easily by following the steps highlighted in Configuring Backstage but use the <code>EntityPagerDutySmallCard</code> instead.</p> <p>The on call and insights tabs can be removed from the Card by following the steps detailed in hide on call and hide insights.</p> <p></p> <p>You can optionally also disable the chance to create new incidents from the card by making it <code>read-only</code>. Refer to the documentation to see how to do it.</p>"},{"location":"getting-started/backstage/","title":"Configuring Backstage","text":"<p>Note</p> <p>To setup the PagerDuty plugin on Backstage you need to have an API Key - or client id and client secret for OAuth to generate an access token - and an Integration Key generated both for your account and service. If you don't have this information already you must follow the steps described in the PagerDuty integration section.</p>"},{"location":"getting-started/backstage/#installing-the-plugin","title":"Installing the plugin","text":"<p>Note</p> <p>The following steps assume you already have a Backstage project created. If that is not the case, follow the Getting Started guide on Backstage.io to create one or create one by running <code>npx @backstage/create-app</code> on your terminal.</p> <p>To install the PagerDuty plugin into Backstage run the following commands from your Backstage root directory.</p> <pre><code>yarn add --cwd packages/app @pagerduty/backstage-plugin # (1)!\n</code></pre> <ol> <li>This command adds <code>@pagerduty/backstage-plugin</code> package to the <code>packages/app</code> folder because it is a frontend plugin.</li> </ol> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-backend # (1)!\n</code></pre> <ol> <li>This command adds <code>@pagerduty/backstage-plugin-backend</code> package to the <code>packages/backend</code> folder because it is a backend plugin.</li> </ol> <p>That's it! Now it's time to add the plugin to Backstage and your services.</p>"},{"location":"getting-started/backstage/#add-the-frontend-plugin-to-your-application","title":"Add the frontend plugin to your application","text":"<p>The frontend plugin needs to be added to your application and currently that requires some code changes to the Backstage application. We will do that by updating the <code>EntityPage.tsx</code> file in <code>packages/app/src/components/catalog</code>.</p> <p>Add the following imports to the top of the file:</p> <pre><code>import {\n    isPluginApplicableToEntity as isPagerDutyAvailable,\n    EntityPagerDutyCard,\n} from '@pagerduty/backstage-plugin';\n</code></pre> <p>Find <code>const overviewContent</code> in <code>EntityPage.tsx</code>, and add the following snippet inside the outermost <code>Grid</code> defined there, just before the closing <code>&lt;/Grid&gt;</code> tag:</p> <pre><code>&lt;EntitySwitch&gt;\n  &lt;EntitySwitch.Case if={isPagerDutyAvailable}&gt;\n    &lt;Grid item md={6}&gt;\n      &lt;EntityPagerDutyCard /&gt;\n    &lt;/Grid&gt;\n  &lt;/EntitySwitch.Case&gt;\n&lt;/EntitySwitch&gt;\n</code></pre> <p>Once you are done, the <code>overviewContent</code> definition should look similar to this:</p> <pre><code>const overviewContent = (\n  &lt;Grid ...&gt;\n    ...\n    &lt;EntitySwitch&gt;\n      &lt;EntitySwitch.Case if={isPagerDutyAvailable}&gt;\n        &lt;Grid item md={6}&gt;\n          &lt;EntityPagerDutyCard /&gt;\n        &lt;/Grid&gt;\n      &lt;/EntitySwitch.Case&gt;\n    &lt;/EntitySwitch&gt;\n  &lt;/Grid&gt;\n);\n</code></pre> <p>Now the PagerDuty plugin will be displayed in all your components that include PagerDuty annotations.</p> <p>Note</p> <p>The code samples provided above reflect the default configuration of the <code>PagerDutyCard</code> entity. You have at your disposal some parameters that allow you to prevent users from creating incidents, or hide the change events tab or even hide the on-call section of the card.</p>"},{"location":"getting-started/backstage/#configure-the-frontend-plugin","title":"Configure the Frontend plugin","text":"<p>The frontend plugin for PagerDuty is now added to your application but in order for it to show you need to configure your entities and the application itself.</p>"},{"location":"getting-started/backstage/#annotating-entities","title":"Annotating entities","text":"<p>For every component that shows up in your Backstage catalog you have a <code>.yaml</code> file with its configuration. Add an annotation to the entity like this:</p> <pre><code>annotations:\n  pagerduty.com/service-id: [SERVICE-ID] #(1)!\n</code></pre> <ol> <li>The service id can be found by navigating to a Service with PagerDuty console and pulling the ID value out of the URL (e.g. https://[YOUR-ACCOUNT].pagerduty.com/service-directory/[SERVICE-ID]).</li> </ol> <p>By default, if you only specify the <code>pagerduty.com/service-id</code> annotation, the <code>PagerDutyCard</code> component will disable the Create Incident button. But if you are using one of the latest versions (@pagerduty/backstage-plugin-backend:0.9.0 or higher) there is a mechanism to automatically create an integration in your PagerDuty services and add a <code>pagerduty.com/integration-key</code> annotation to the corresponding Backstage entity, therefore enabling the option to create incidents from the <code>PagerDutyCard</code>.</p> <p>You can optionally decide to annotate with an integration-key instead and the plugin will get the corresponding <code>service-id</code> and add it as an annotation but since it requires more steps we recommend users to annotate with <code>pagerduty.com/service-id</code>.</p> <p>Note</p> <p>If you are using multiple PagerDuty accounts in your setup you should add an <code>account</code> annotation to your Backstage entities. This way the plugin knows with which instance to communicate with. If you don't provide one, the account that was selected as the default one will be used.</p> <pre><code>annotations:\n    pagerduty.com/account: [PAGERDUTY-ACCOUNT] #(1)!\n</code></pre> <ol> <li>The account value defined here is the PagerDuty account subdomain where the PagerDuty service mapped to your Backstage entity resides (e.g. https://[PAGERDUTY-ACCOUNT].pagerduty.com).</li> </ol>"},{"location":"getting-started/backstage/#add-the-backend-plugin-to-your-application","title":"Add the backend plugin to your application","text":"<p>Note</p> <p>Version 0.6.0 of the backend plugin (<code>@pagerduty/backstage-plugin-backend</code>) introduced support for Backstage's new backend system which simplifies the backend configuration and requires less code.</p> <p>If you followed the steps in \"Installing the plugin\", the backend plugin for PagerDuty is now added to your application but in order for it to expose its capabilities to the frontend plugin you need to configure it. There are two approaches for that: Legacy Backend System or the New Backend System.</p> <p>Warning</p> <p>If you were using the PagerDuty plugin for Backstage before the release of <code>@pagerduty/backstage-plugin-backend@0.6.0</code> then you already have the Backend configured and you are probably looking for some migration steps, correct?</p> <p>Check the migration guidance here.</p>"},{"location":"getting-started/backstage/#legacy-backend-system","title":"Legacy Backend System","text":"<p>Create a new file called <code>pagerduty.ts</code> at <code>packages/backend/src/plugins/pagerduty.ts</code> and add the following content:</p> <pre><code>import { Router } from 'express';\nimport { PluginEnvironment } from '../types';\nimport { createRouter } from '@pagerduty/backstage-plugin-backend';\n\nexport default async function createPlugin(\n    env: PluginEnvironment,\n): Promise&lt;Router&gt; {\n    return await createRouter({\n        config: env.config,\n        logger: env.logger,\n    });\n}\n</code></pre> <p>This creates the backend plugin that you can now configure in your application.</p> <p>In <code>packages/backend/src/index.ts</code> import your plugin and add a route for the APIs exposed by PagerDuty's backend plugin.</p> <pre><code>import pagerduty from './plugins/pagerduty';\n// ...\nasync function main() {\n  // ...\n  const pagerdutyEnv = useHotMemoize(module, () =&gt; createEnv('pagerduty'));\n  // ...\n  apiRouter.use('/pagerduty', await pagerduty(pagerdutyEnv));\n</code></pre>"},{"location":"getting-started/backstage/#new-backend-system","title":"New Backend System","text":"<p>Backstage's new backend system requires less code to setup plugins. Just open <code>packages/backend/src/index.ts</code> file and add the PagerDuty backend plugin to your Backstage App as shown below.</p> <pre><code>// pageduty plugin\nbackend.add(import('@pagerduty/backstage-plugin-backend'));\n</code></pre>"},{"location":"getting-started/backstage/#configure-api-authorization","title":"Configure API Authorization","text":"<p>The PagerDuty plugin requires access to PagerDuty APIs and so we need to configure our Backstage app with the necessary credentials to reach the APIs. This step requires you to use an access token - for OAuth - or an API token.</p> <p>Note</p> <p>If you followed previous steps you should have this information already but if you haven't done so follow the steps in Register an App to get the client id and client secret for OAuth authorization or Generate a General Access REST API Token to generate a REST API Token.</p>"},{"location":"getting-started/backstage/#single-pagerduty-account","title":"Single PagerDuty Account","text":"<p>If all your services exist in a single PagerDuty account you should follow the instructions below.</p>"},{"location":"getting-started/backstage/#scoped-oauth-recommended","title":"Scoped OAuth (recommended)","text":"<p>In <code>app-config.yaml</code> file add the following configuration and set your OAuth configuration:</p> <pre><code>pagerDuty:\n  oauth:\n    clientId: ${PD_CLIENT_ID}\n    clientSecret: ${PD_CLIENT_SECRET}\n    subDomain: ${PD_ACCOUNT_SUBDOMAIN} \n    region: ${PD_ACCOUNT_REGION}        // Optional. \n                                        // Allowed values: 'us', 'eu'.\n                                        // Defaults to 'us'.\n</code></pre> <p>Note</p> <p>The <code>subDomain</code> property requires only the first segment of your PagerDuty account url. Example: If your PagerDuty account url is <code>https://myaccount.pagerduty.com</code> then your <code>subDomain</code> value should be <code>myaccount</code>.</p> <p>Configuring it with an invalid value might cause authentication to fail.</p>"},{"location":"getting-started/backstage/#rest-api-token","title":"REST API Token","text":"<p>In <code>app-config.yaml</code> file add the following configuration to set your REST API Token:</p> <pre><code>pagerDuty:\n  apiToken: ${PAGERDUTY_TOKEN}\n</code></pre> <p>Warning</p> <p>If you were using the plugin before version 0.8.1 of the frontend or version 0.3.1 of the backend you need to configure a proxy configuration instead. That configuration is now deprecated so use this configuration instead.</p>"},{"location":"getting-started/backstage/#multiple-pagerduty-accounts","title":"Multiple PagerDuty Accounts","text":"<p>Companies may have more than one PagerDuty account for many reasons. It might be because they want to segregate access to information to specific teams, or maybe because the company acquired any company that was already a PagerDuty customer.</p> <p>Independent of the reason, we added multi-account support on version 0.14.0 of the frontend plugin (@pagerduty/backstage-plugin). In order to configure it you should follow the steps below.</p>"},{"location":"getting-started/backstage/#scoped-oauth-recommended_1","title":"Scoped OAuth (recommended)","text":"<p>In <code>app-config.yaml</code> file add the following configuration and set your OAuth configuration:</p> <pre><code>pagerDuty:\n  accounts:\n  - id: ${PD_ACCOUNT_SUBDOMAIN_1}    // The ID must be the subdomain for the account\n    isDefault: true                  // Only one account can be defined as the default/fallback\n    apiBaseUrl: ${PD_API_BASE_URL_1}\n    oauth:\n      clientId: ${PD_CLIENT_ID_1}\n      clientSecret: ${PD_CLIENT_SECRET_1}\n      subDomain: ${PD_ACCOUNT_SUBDOMAIN_1}\n      region: ${PD_ACCOUNT_REGION_1}  // Optional. allowed values: 'us', 'eu'.\n                                  // Defaults to 'us'.\n  - id: ${PD_ACCOUNT_SUBDOMAIN_2}\n    apiBaseUrl: ${PD_API_BASE_URL_2}\n    oauth:\n      clientId: ${PD_CLIENT_ID_2}\n      clientSecret: ${PD_CLIENT_SECRET_2}\n      subDomain: ${PD_ACCOUNT_SUBDOMAIN_2}\n</code></pre> <p>Note</p> <p>The <code>subDomain</code> property requires only the first segment of your PagerDuty account url. Example: If your PagerDuty account url is <code>https://myaccount.pagerduty.com</code> then your <code>subDomain</code> value should be <code>myaccount</code>.</p> <p>Configuring it with an invalid value might cause authentication to fail.</p>"},{"location":"getting-started/backstage/#rest-api-token_1","title":"REST API Token","text":"<p>In <code>app-config.yaml</code> file add the following configuration to set your REST API Token:</p> <pre><code>pagerDuty:\n  accounts:\n  - id: ${PD_ACCOUNT_SUBDOMAIN_1}    // The ID must be the subdomain for the account\n    isDefault: true                  // Only one account can be defined as the default/fallback\n    apiBaseUrl: ${PD_API_BASE_URL_1}\n    apiToken: ${PAGERDUTY_TOKEN}\n  - id: ${PD_ACCOUNT_SUBDOMAIN_2}\n    apiToken: ${PAGERDUTY_TOKEN}\n</code></pre> <p>Note</p> <p>In the new multi-account setup you can have accounts configured with Scoped OAuth and others with REST API Token. You can also specify custom API base url and events url for some and not others. All optional properties will revert to default values if not present.</p>"},{"location":"getting-started/backstage/#test-your-configuration","title":"Test your configuration","text":"<p>Start your Backstage app, passing the PagerDuty API token or OAuth parameters as a environment variables.</p>"},{"location":"getting-started/backstage/#for-scoped-oauth","title":"For Scoped OAuth","text":"<pre><code>PD_CLIENT_ID='&lt;ID&gt;' PD_CLIENT_SECRET='&lt;SECRET&gt;' PD_ACCOUNT_SUBDOMAIN='&lt;SUBDOMAIN&gt;' PD_ACCOUNT_REGION='&lt;REGION&gt;'  yarn dev\n</code></pre>"},{"location":"getting-started/backstage/#for-rest-api-token","title":"For REST API Token","text":"<pre><code>PAGERDUTY_TOKEN='&lt;TOKEN&gt;' yarn dev\n</code></pre> <p>This will add an <code>Authorization</code> header to all the requests made to PagerDuty REST APIS.</p>"},{"location":"getting-started/pagerduty/","title":"PagerDuty integration","text":"<p>The PagerDuty plugin for Backstage requires some steps to be performed in PagerDuty before you start configuring the plugin in Backstage. Follow the steps below to ensure all requirements are in-place.</p> <p>Warning</p> <p>PagerDuty plugin for Backstage relies on the Events API v2 integration to send events to PagerDuty.</p> <p>To setup an integration on a PagerDuty service and generate the necessary authorizations, such as the API token or register an App, you need a PagerDuty Admin role. If you do not have this role, reach out to a Global Admin or Account Owner within your organization to request configuration of this plugin.</p>"},{"location":"getting-started/pagerduty/#setup-pagerduty","title":"Setup PagerDuty","text":"<p>The PagerDuty plugin for Backstage will in essence perform two types of actions.</p> <ol> <li>Will use the Events API v2 to send events to PagerDuty and trigger incidents on a specific service.</li> <li>Will use the PagerDuty REST API to query for service information that will then be shown in the PagerDuty Card component.</li> </ol> <p>Perform the following steps on PagerDuty before integrating the plugin in Backstage.</p>"},{"location":"getting-started/pagerduty/#create-a-service-integration-for-backstage-optional","title":"Create a service integration for Backstage (optional)","text":"<p>Note</p> <p>In one the latest releases of the plugin (@pagerduty/backstage-plugin-backend:0.9.0) we introduced a mechanism to automatically create a Backstage integration on every service mapped to a Backstage instance that doesn't have an integration setup yet. This saves admins time setting up the the integration between Backstage entities and PagerDuty services.</p> <p>You might still want to create integrations yourself in some situations, for instance, if you are using Terraform to configure your PagerDuty services. In that case, the plugin will just pick this information up and add it as an annotation on the entity.</p> <p>Creating a service integration in PagerDuty is the default mechanism to connect services with alerts coming from third-party tools and platforms. In order to create a service integration you can follow three different approches:</p> <ol> <li> <p>If you are adding your integration to an existing service:</p> <ol> <li>From the top menu, select Services.</li> <li>Click the name of the service you want to add the integration to.</li> <li>Go to the Integrations tab and click Add an Integration button.</li> <li>Search for the Backstage integration, select it and click the Add button.</li> <li>An integration will be created and you can see the integration key and the integration endpoint.</li> </ol> <p></p> <p>Note</p> <p>On this screen you can update the integration name to something that allows you to easily identify the Backstage instance you are connecting to.</p> </li> <li> <p>If you are creating a new service for your integration: Follow the instructions in the documentation that shows how to create a service and select Backstage as the Integration Type in step 5.</p> </li> <li>If you want to automate service creation with Software Template: Follow the steps in Create PagerDuty service with Software Templates.</li> </ol> <p>Once you complete this step you will be able to configure your services in Backstage to create incidents in PagerDuty by using the Events API.</p>"},{"location":"getting-started/pagerduty/#setup-api-authorization","title":"Setup API Authorization","text":"<p>To use PagerDuty REST APIs you need to have either an API Token or a registered Application that will give you the necessary credentials to request a temporary access token. Follow just one of the following sections as they serve the same purpose but in slightly different ways.</p> <p>Note</p> <p>The API Token will grant access to all APIs and operations. If this is a security concern, please use Scoped OAuth which is now supported in all PagerDuty supported regions and allows you to specify the APIs and operations that Backstage can leverage. This improves security by limiting the given permissions assigned to the token.</p> <p>Scoped OAuth is the recommended approach.</p>"},{"location":"getting-started/pagerduty/#register-an-application-for-scoped-oauth-recommended","title":"Register an Application for Scoped OAuth (recommended)","text":"<p>In order to use Scoped OAuth you need to register an App in PagerDuty. Follow the next steps to register an app, define the necessary permissions and capture the necessary information to generate a temporary access token.</p> <ol> <li>Log int to your PagerDuty account</li> <li>From the top menu, select Integrations.</li> <li>Select App Registration from the menu.</li> <li>Once in the app registration page, select + New App.</li> <li>Provide a name and description to your app.</li> <li> <p>Select the OAuth 2.0 check-box, and click Next.</p> <p></p> </li> <li> <p>Select Scoped OAuth as the preferred Authorization mechanism.    </p> </li> <li> <p>On permission scope we recommend you to select the following permissions to ensure that the plugin works as expected. Once you select them click on *Register App.</p> <pre><code>    abilities.read // used in scaffolder only\n    analytics.read\n    escalation_policies.read\n    incidents.read\n    oncalls.read\n    schedules.read\n    services.read\n    services.write // used in scaffolder only\n    standards.read\n    teams.read\n    users.read\n    vendors.read // used in scaffolder only\n</code></pre> <p>Warning</p> <p>You don't have to assign all the above permissions to your application but not doing so might prevent the plugin from running as expected and you might see some errors on the PagerDuty card.</p> </li> <li> <p>Copy the Client ID and Client Secret and store them somewhere safe. We will use them later when configuring Backstage.</p> </li> </ol> <p>If you were successful in following the above steps you are ready to move to the Backstage configuration.</p>"},{"location":"getting-started/pagerduty/#generate-a-general-access-rest-api-token","title":"Generate a General Access REST API Token","text":"<p>Note</p> <p>General Access Tokens provide an API token with the full access to the PagerDuty Account by default. Still, you can choose to create API tokens with read-only access by following the action mentioned on step 4.</p> <p>To create an API Key to use with Backstage you:</p> <ol> <li>Open the PagerDuty console</li> <li>Navigate to the Integrations &gt; API Access Keys</li> <li>Click Create new API Key</li> <li> <p>Enter a Description to help you identify the key later</p> <p>Note</p> <p>For added security you may select the Read-only API Key check-box. Current capabilities of this plugin only perform read operations on the API so it is safe to do so.</p> <p></p> <p>This might change in the near future when new features are added.</p> </li> <li> <p>Click Create Key</p> </li> <li>Copy the key and store it somewhere safe as we will need it later</li> </ol> <p>If you were successful in following the above steps you are ready to move to the Backstage configuration.</p>"},{"location":"migration/backend-system-migration/","title":"Migrate to Backstage's new backend system","text":"<p>Version 0.6.0 of <code>@pagerduty/backstage-plugin-backend</code> introduced support for Backstage's new backend system while remaining backwards compatible. So, if you want to continue using the legacy backend system you can do so. There's no rush!</p> <p>Still, a couple things changed. Due to an architecture change on the new backend system we add to extract the scaffolder actions to a new Backstage module (@pagerduty/backstage-plugin-scaffolder-actions).</p> <p>We are aware of the slight impact for existing users but with this decision we are able to support all customers and allow users to migrate their Backstage applications to the new model as they wish.</p>"},{"location":"migration/backend-system-migration/#upgrading-to-the-new-package-only-legacy-backend-system","title":"Upgrading to the new package only (legacy backend system)","text":"<p>If you choose to upgrade to <code>@pagerduty/backstage-plugin-backend</code> 0.6.0 and still use Backstage's legacy backend system follow the steps below for a smooth transition.</p> <ol> <li> <p>Add and install the new package</p> <pre><code>yarn --cwd packages/backend add @pagerduty/backstage-plugin-backend  # or upgrade to 0.6.0\nyarn --cwd packages/backend add @pagerduty/backstage-plugin-scaffolder-actions\n</code></pre> </li> <li> <p>Update package name in <code>packages/backend/src/plugins/scaffolder.ts</code></p> <pre><code>import { createPagerDutyServiceAction } from '@pagerduty/backstage-plugin-scaffolder-actions';\n</code></pre> </li> </ol>"},{"location":"migration/backend-system-migration/#the-new-backend-system","title":"The new backend system","text":"<p>The new backend system reduces drastically the amount of code needed to setup plugins in Backstage. Assuming that you already migrated to the new backend system by following these steps outlined by the Backstage team, follow the steps below to configure the PagerDuty Scaffolder Actions.</p> <ol> <li> <p>Add and install the new package</p> <pre><code>yarn --cwd packages/backend add @pagerduty/backstage-plugin-backend  # or upgrade to 0.6.0\nyarn --cwd packages/backend add @pagerduty/backstage-plugin-scaffolder-actions\n</code></pre> </li> <li> <p>Add backend middleware in <code>packages/backend/src/index.ts</code></p> <pre><code>backend.add(import('@pagerduty/backstage-plugin-backend'));\nbackend.add(import('@pagerduty/backstage-plugin-scaffolder-actions'));\n</code></pre> </li> </ol> <p>You can now build and run your application. That's it! If you need more details on how to integrated the scaffolder action with Templates follow the guidance provided here.</p>"},{"location":"migration/from-backstage-owned/","title":"From Backstage-owned plugin","text":"<p>If you are migrating from the PagerDuty plugin that was maintained by Backstage (@backstage/plugin-pagerduty), the steps to migrate are pretty straight forward.</p> <ol> <li> <p>Remove the legacy PagerDuty plugin from your Backstage project</p> <pre><code># From your Backstage root directory\nyarn remove --cwd packages/app @backstage/plugin-pagerduty\n</code></pre> </li> <li> <p>Install the new frontend PagerDuty plugin for Backstage</p> <pre><code># From your Backstage root directory\nyarn add --cwd packages/app @pagerduty/backstage-plugin @pagerduty/backstage-plugin-common\n</code></pre> </li> <li> <p>Replace all occurrences of <code>@backstage/plugin-pagerduty</code> with <code>@pagerduty/backstage-plugin</code> in your components</p> </li> <li> <p>Install the backend PagerDuty plugin for Backstage</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-backend @pagerduty/backstage-plugin-common\n</code></pre> </li> <li> <p>Add the backend plugin to your Backstage project</p> </li> <li> <p>Configure API credentials to make requests to PagerDuty REST API</p> </li> <li> <p>Remove PagerDuty proxy configuration from you <code>app-config.yaml</code> file</p> </li> <li> <p>Re-install dependencies and run Backstage locally to test that everything is working</p> <pre><code># From your Backstage root directory\nyarn install &amp;&amp; yarn dev\n</code></pre> </li> </ol>"},{"location":"release-notes/backend/","title":"Release notes for Backend plugin","text":""},{"location":"release-notes/backend/#091","title":"&gt; 0.9.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary","title":"Summary","text":"<p>This release introduces a few enhancements that to ensure a) no undesired code is executed when an exception is caught, and b) to avoid trying to emit headers multiple times.</p>"},{"location":"release-notes/backend/#changes","title":"Changes","text":"<ul> <li>fix: add missing \"return\" statements after errors</li> </ul>"},{"location":"release-notes/backend/#dependencies","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.1</code></li> </ul>"},{"location":"release-notes/backend/#090","title":"&gt; 0.9.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_1","title":"Summary","text":"<p>This release introduces a set of features that were in a way dependent on each other which makes it quite large when compared to a typical release.</p> <ul> <li>Automated Backstage integration setup for mapped entities: With the goal of simplifying the setup process for mapped entities we introduced a feature that automatically creates a integration on the corresponding PagerDuty service when a <code>pagerduty.com/service-id</code> property is available.</li> </ul> <p>With this feature, admins can skip the step of creating an integration in PagerDuty and copy the integration key to each Backstage entity file. They can now simply add the <code>pagerduty.com/service-id</code> annotation to their service, or simply use the <code>PagerDutyPage</code> to map existing PagerDuty services to Backstage entities and the plugin will take care of the rest.</p> <ul> <li> <p>Plugin configuration persistence layer: To support two-way sync for service dependencies we decided to give the admins the option of choosing which is their main source of truth and for that reason we introduced a new section in <code>PagerDutyPage</code> where you can specify your preferences. The backend centralises all the persistence layer and this release includes all the necessary methods for it.</p> </li> <li> <p>Two-way service dependency sync: This release introduces a way to keep your service dependencies in sync between PagerDuty and Backstage. Admins will be able to choose which source is the main one. This is an opt-in feature that you can enable on the <code>PagerDutyPage</code> under the <code>configuration</code> tab.</p> </li> </ul> <p>\u203c\ufe0f Important: Due to a Backstage design decision it is not possible to fully overwrite the relations specified in each entity's configuration file. For that reason the option to synchronise strictly from PagerDuty side is not available.</p>"},{"location":"release-notes/backend/#changes_1","title":"Changes","text":"<ul> <li>feat: service dependency sync</li> </ul>"},{"location":"release-notes/backend/#dependencies_1","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.1</code></li> </ul>"},{"location":"release-notes/backend/#082","title":"&gt; 0.8.2","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_2","title":"Summary","text":"<p>This release fixes some potential issues with JSON.parse on unsafe parameters that can lead to unexpected exceptions.</p>"},{"location":"release-notes/backend/#changes_2","title":"Changes","text":"<ul> <li>chore: refactor JSON.parse usage on unsafe code</li> </ul>"},{"location":"release-notes/backend/#dependencies_2","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/backend/#081","title":"&gt; 0.8.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_3","title":"Summary","text":"<p>This release bumps all Backstage packages to the latest version to allow an upgrade to 1.29.1 without any warnings on outdated packages.</p>"},{"location":"release-notes/backend/#changes_3","title":"Changes","text":"<ul> <li>fix: bump deps to work with backstage v1.29.0</li> </ul>"},{"location":"release-notes/backend/#dependencies_3","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/backend/#080","title":"&gt; 0.8.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_4","title":"Summary","text":"<p>This release introduces the necessary changes to support multi-account configurations.</p> <ul> <li>Plugin database now supports account reference</li> <li>All PagerDuty API operations are account aware</li> <li>Updated plugin configuration schema to accept multi-account configurations</li> </ul> <p>We made extensive tests to ensure that the existing configuration for a single PagerDuty account still works. Therefore existing customers will be able to upgrade to the latest version without breaking anything.</p>"},{"location":"release-notes/backend/#changes_4","title":"Changes","text":"<ul> <li>feat: add support for multiple accounts</li> </ul>"},{"location":"release-notes/backend/#dependencies_4","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/backend/#072","title":"&gt; 0.7.2","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_5","title":"Summary","text":"<p>This release handles properly an exception that was causing the entity mapping page to break when there is an integration key specified in the entity configuration and that integration key doesn't exist in the PagerDuty Account.</p> <p>Previously it would return an HTTP 404 error, causing the application to break. Now, it handles that error without breaking the application.</p>"},{"location":"release-notes/backend/#changes_5","title":"Changes","text":"<ul> <li>fix: ignore invalid integration keys when building entity reference dict</li> </ul>"},{"location":"release-notes/backend/#dependencies_5","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.1.5</code></li> </ul>"},{"location":"release-notes/backend/#071","title":"&gt; 0.7.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_6","title":"Summary","text":"<p>PagerDuty advocates for full-service ownership and one recommendation on that direction is for customers to associate teams with services to state clear ownership of that service. Still, this is not enforced and therefore some customers don't have teams configured.</p> <p>This release ensures the backend handles empty teams arrays gracefully to prevent the PagerDutyPage component from staying in a loading state indefinitely.</p>"},{"location":"release-notes/backend/#changes_6","title":"Changes","text":"<ul> <li>fix: handle empty teams array to prevent TypeError</li> </ul>"},{"location":"release-notes/backend/#dependencies_6","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.1.5</code></li> </ul>"},{"location":"release-notes/backend/#070","title":"&gt; 0.7.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_7","title":"Summary","text":"<p>Release 0.7.0 adds support for new entity mapping APIs to be used by the frontend component to allow easy onboarding of existing services from PagerDuty into Backstage. This is a highly requested feature that aims to ease the process of onboarding existing PagerDuty services into Backstage.</p> <p>This release includes new API endpoints to:</p> <ul> <li>Get all entity mappings persisted to the database</li> <li>Get an entity mapping for a specific Backstage Entity reference</li> <li>Persist mappings into the database</li> </ul> <p>These APIs introduce the needed mechanisms to persist data into the database selected by the Backstage Admin. The database table is automatically generated and is exclusively used by PagerDuty plugin Backstage to ensure data segregation.</p> <p>This release also includes a few security fixes on dependencies used by the Backstage packages.</p>"},{"location":"release-notes/backend/#changes_7","title":"Changes","text":"<ul> <li>feat: entity mapping persistence</li> <li>build(deps): Bump @azure/identity from 4.0.1 to 4.2.1</li> <li>build(deps): Bump mysql2 from 3.9.7 to 3.10.0</li> <li>build(deps): Bump ws from 8.14.2 to 8.17.1</li> </ul>"},{"location":"release-notes/backend/#dependencies_7","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.1.5</code></li> </ul>"},{"location":"release-notes/backend/#061","title":"&gt; 0.6.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_8","title":"Summary","text":"<p>This release adds security patches to fix two moderate and two critical vulnerabilities on mysql2 dependency.</p>"},{"location":"release-notes/backend/#changes_8","title":"Changes","text":"<ul> <li>build(deps): Bump mysql2 from 3.9.4 to 3.9.7</li> <li>build(deps): Bump mysql2 from 3.9.2 to 3.9.4</li> </ul>"},{"location":"release-notes/backend/#dependencies_8","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/backend/#060","title":"&gt; 0.6.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_9","title":"Summary","text":"<p>This release adds support to the new Backstage backend system without forcing users to move to the new backend system if they choose to stay in the legacy backend system for now.</p> <p>Warning: Existing backend plugin users need to make some changes in code because we had to extract the Scaffolder actions to a separate Backstage module (@pagerduty/backstage-plugin-scaffolder-actions).</p> <p>For existing users using the legacy backend system</p> <ol> <li> <p>Install new package</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-scaffolder-actions\nyarn install\n</code></pre> </li> <li> <p>Update your existing reference in <code>packages/backend/src/plugins/scaffolder.ts</code> from the backend component to the new one</p> <pre><code>import { createPagerDutyServiceAction } from '@pagerduty/backstage-plugin-scaffolder-actions';\n</code></pre> </li> <li> <p>Pass the environment config and logger to <code>createPagerDutyServiceAction</code></p> <pre><code>  const actions = [\n     ...builtInActions, \n     createPagerDutyServiceAction({ \n          config: env.config, \n          logger: env.logger \n     })\n  ];\n</code></pre> </li> </ol> <p>For users using the new backend system</p> <ol> <li> <p>Install new package</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-scaffolder-actions\nyarn install\n</code></pre> </li> <li> <p>(Optional) If this is the first time configuring PagerDuty's plugin you also need the following packages</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-backend @pagerduty/backstage-plugin-common\nyarn install\n</code></pre> </li> <li> <p>Add the package to your backend in <code>packages/backend/src/index.ts</code></p> <pre><code>// PagerDuty backend plugin\nbackend.add(import('@pagerduty/backstage-plugin-backend'));\n\n// PagerDuty Scaffolder Actions Module\nbackend.add(import('@pagerduty/backstage-plugin-scaffolder-actions'));\n</code></pre> </li> </ol>"},{"location":"release-notes/backend/#changes_9","title":"Changes","text":"<ul> <li>build(deps): Bump tar from 6.2.0 to 6.2.1</li> <li>chore: add support to new backend system</li> </ul>"},{"location":"release-notes/backend/#dependencies_9","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/backend/#052","title":"&gt; 0.5.2","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_10","title":"Summary","text":"<p>This release introduces a couple of security patches related to dependencies.</p> <ul> <li>express</li> <li>webpack-dev-middleware</li> </ul>"},{"location":"release-notes/backend/#changes_10","title":"Changes","text":"<ul> <li>build(deps): Bump webpack-dev-middleware from 5.3.3 to 5.3.4</li> <li>build(deps): Bump express from 4.18.2 to 4.19.2</li> </ul>"},{"location":"release-notes/backend/#dependencies_10","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/backend/#051","title":"&gt; 0.5.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_11","title":"Summary","text":"<p>This release fixes a bug related to missing API scopes that was preventing the new capabilities introduce by the new UI (frontend 0.10.0).</p>"},{"location":"release-notes/backend/#changes_11","title":"Changes","text":"<ul> <li>fix: adds the required API scopes for the new UI</li> </ul>"},{"location":"release-notes/backend/#dependencies_11","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/backend/#050","title":"&gt; 0.5.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_12","title":"Summary","text":"<p>This release introduces new backend API endpoints to query service standards and service metrics. These features are used by the frontend component to provide additional information on the services.</p>"},{"location":"release-notes/backend/#changes_12","title":"Changes","text":"<ul> <li>feat: apis supporting new card UI</li> <li>build(deps): Bump follow-redirects from 1.15.5 to 1.15.6</li> </ul>"},{"location":"release-notes/backend/#dependencies_12","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/backend/#046","title":"&gt; 0.4.6","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_13","title":"Summary","text":"<p>Release <code>0.4.6</code> replaces global <code>fetch</code> with <code>node-fetch</code> library as recommended by Backstage on ADR013.</p> <p>This standardizes on the HTTP package used by the backend plugin and solves issue #37 that prevents HTTP calls to succeed behind a proxy - used in many organizations. This introduces no changes to existing plugin users except for the ones experiencing the behaviour on #37.</p> <p>Also fixes a security vulnerability by bumping up version of <code>jose</code> from 4.15.4 to 4.15.5.</p>"},{"location":"release-notes/backend/#changes_13","title":"Changes","text":"<ul> <li>fix: replace fetch with node-fetch to comply with ADR013</li> <li>build(deps): Bump jose from 4.15.4 to 4.15.5</li> </ul>"},{"location":"release-notes/backend/#045","title":"&gt; 0.4.5","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_14","title":"Summary","text":"<p>This release updates the <code>config.d.ts</code> values to mark <code>pagerDuty.apiToken</code> and <code>pagerDuty.oauth</code> as secret values.</p> <p>These are only used by the backend currently and should not be made visible to the frontend. See https://backstage.io/docs/conf/defining/#visibility for more details.</p>"},{"location":"release-notes/backend/#changes_14","title":"Changes","text":"<ul> <li>fix: ensure secret configuration values are secret</li> </ul>"},{"location":"release-notes/backend/#044","title":"&gt; 0.4.4","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_15","title":"Summary","text":"<p>This release fixes an issue on the on-call section that was retrieving an unordered list of on-call users instead of an ordered list.</p> <p>It also fixes a security issue on a backstage dependency (@backstage/backend-common).</p>"},{"location":"release-notes/backend/#changes_15","title":"Changes","text":"<ul> <li>build(deps): Bump @backstage/backend-common from 0.19.9 to 0.19.10</li> <li>fix(oncall-api): return all users from lowest escalation level</li> </ul>"},{"location":"release-notes/backend/#043","title":"&gt; 0.4.3","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_16","title":"Summary","text":"<p>This release resolves an issue reported in backstage-plugin (#74) which prevents users from overriding the REST API base url (e.g. for EU based accounts). This feature was possible through the Backstage proxy configuration.</p> <p>With this, users will be able to add a new configuration to the PagerDuty plugin in <code>app-config.yaml</code> like the example below. </p> <pre><code>pagerDuty:\n  apiBaseUrl: https://api.eu.pagerduty.com     #defaults to https://api.pagerduty.com\n</code></pre>"},{"location":"release-notes/backend/#changes_16","title":"Changes","text":"<ul> <li>fix: adding support for API base url override</li> </ul>"},{"location":"release-notes/backend/#042","title":"&gt; 0.4.2","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_17","title":"Summary","text":"<p>This release introduces a security patch to a third-party dependency.</p>"},{"location":"release-notes/backend/#changes_17","title":"Changes","text":"<ul> <li>build(deps): Bump ip from 2.0.0 to 2.0.1</li> </ul>"},{"location":"release-notes/backend/#041","title":"&gt; 0.4.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_18","title":"Summary","text":"<p>This release changes the start behaviour for the backend plugin. The former behaviour was to prevent the plugin from starting when credentials were missing. This is not the behaviour for most plugins and therefore this release makes that change to comply with existing behaviour.</p> <p>Release 0.4.1 allows the plugin to start if credentials are missing, logs an error to simplify troubleshooting and shows an error message in the PagerDuty Card.</p> <p></p>"},{"location":"release-notes/backend/#changes_18","title":"Changes","text":"<ul> <li>refactor: change start behaviour on missing credentials</li> </ul>"},{"location":"release-notes/backend/#040","title":"&gt; 0.4.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_19","title":"Summary","text":"<p>Release 0.4.0 introduces a minor change that adds a new option configuration field <code>oauth</code>. This new configuration improves security when calling PagerDuty REST APIs by replacing the current <code>apiToken</code> configuration that assigns full-access privileges to Backstage. </p> <p>With Scoped OAuth support the PagerDuty admin can grant only the necessary permissions to Backstage instead of access to all APIs and operations.</p> <p>The new configuration can be defined in <code>app-config.yaml</code> with the following parameters:</p> <pre><code>pagerDuty:\n  oauth:\n    clientId: ${PD_CLIENT_ID}\n    clientSecret: ${PD_CLIENT_SECRET}\n    subDomain: ${PD_ACCOUNT_SUBDOMAIN}\n    region: ${PD_ACCOUNT_REGION}           // Optional. allowed values: 'us', 'eu'. Defaults to 'us'.\n</code></pre>"},{"location":"release-notes/backend/#changes_19","title":"Changes","text":"<ul> <li>feat: add OAuth support</li> <li>build(deps): Bump @backstage/backend-app-api from 0.5.8 to 0.5.10</li> <li>docs: updated readme with new features - REST APIs</li> </ul>"},{"location":"release-notes/backend/#033","title":"&gt; 0.3.3","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_20","title":"Summary","text":"<p>This release refactors HTTP error handling in REST API endpoints for backend routes. The new payload expected when an HTTP error is captured looks like the following.</p> <pre><code>{\n    \"errors\": [\n        \"Failed to get change events for service. Caller is not authorized to view the requested resource.\"\n    ]\n}\n</code></pre> <p>This helps in providing a better user experience to the user from a frontend perspective.</p>"},{"location":"release-notes/backend/#changes_20","title":"Changes","text":"<ul> <li>refactor: improve http error handling in REST API endpoints</li> </ul>"},{"location":"release-notes/backend/#032","title":"&gt; 0.3.2","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_21","title":"Summary","text":"<p>This release bumps up the version of <code>@pagerduty/backstage-plugin-common</code> package to version 0.0.2 to solve an issue that was preventing the backend plugin to start.</p>"},{"location":"release-notes/backend/#changes_21","title":"Changes","text":"<ul> <li>chore(deps): upgrade common package version to fix issue preventing backend from starting</li> </ul>"},{"location":"release-notes/backend/#031","title":"&gt; 0.3.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_22","title":"Summary","text":"<p>This release was aimed at removing the dependency on the Backstage proxy. We have replace it with new REST API endpoints for all operations executed from the frontend plugin that currently interact with the PagerDuty REST API directly. With this change we:</p> <ul> <li>Removed the dependency on the Backstage proxy</li> <li>Improved security by limiting the actions performed on the backend API</li> <li>Slightly increase the performance by limiting the data used by the frontend to the essential</li> </ul> <p>Endpoints added:</p> <ul> <li>/oncall-users - returns PagerDutyOnCallUsersResponse with list of users oncall</li> <li>/services - uses integration_key and returns PagerDutyServiceResponse with PagerDuty service information</li> <li>/services/:serviceId - returns PagerDutyServiceResponse with PagerDuty service information</li> <li>/services/:serviceId/change-events - returns PagerDutyChangeEventsResponse with list of last 5 change events for the defined service</li> <li>/services/:serviceId/incidents - returns PagerDutyIncidentsResponse with list of incidents for the defined service</li> </ul> <p>With this change, the proxy configuration on <code>app-config.yaml</code> is no longer required.</p>"},{"location":"release-notes/backend/#changes_22","title":"Changes","text":"<ul> <li>feat: migrate apis to backend</li> <li>build(deps): Bump follow-redirects from 1.15.3 to 1.15.4</li> </ul>"},{"location":"release-notes/backend/#021","title":"&gt; 0.2.1","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_23","title":"Summary","text":"<p>This release introduces the capacity to enable noise reduction through alert grouping and auto pause of notifications.</p> <p>Note: This feature requires AIOps. If you don't have the required plan alert grouping will not be enabled.</p> <p></p> <p>The user will be able to pass an optional parameter (intelligent, time, content_based) from within a software template and during service creation alert grouping will be enabled automatically and using recommended defaults.</p> <p>Auto pause of notifications will also be enabled by default.</p>"},{"location":"release-notes/backend/#changes_23","title":"Changes","text":"<ul> <li>feat: add support for alert grouping</li> </ul>"},{"location":"release-notes/backend/#020","title":"&gt; 0.2.0","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_24","title":"Summary","text":"<p>This new release introduces local APIs that will support the transition from using the Backstage proxy to call PagerDuty APIs and instead use the local APIs provide by the backend plugin. This will allowed the backend to control which data is exposed to Backstage, replacing the current mechanism that exposes all data returned by PagerDuty APIs.</p> <p>This release only exposes an API route to get all escalation policies which will work together with the frontend plugin and the scaffolder custom action to replace the existing text field expecting an Escalation Policy Id with a Drop-down control that list all escalation policies available to the user, improving their user experience.</p> <p></p>"},{"location":"release-notes/backend/#changes_24","title":"Changes","text":"<ul> <li>improv(ux): Adding support for escalation policy dropdown on custom action</li> </ul>"},{"location":"release-notes/backend/#012","title":"&gt; 0.1.2","text":"<p>GitHub release</p>"},{"location":"release-notes/backend/#summary_25","title":"Summary","text":"<p>This release introduces a scaffolder custom action that allows users to create a PagerDuty service from a Software Template and configure the frontend plugin in one single step. Go here to see how to do it.</p>"},{"location":"release-notes/backend/#changes_25","title":"Changes","text":"<ul> <li>feat(scaffolder): custom action to create service in PagerDuty</li> <li>docs(release): :memo: simplified readme</li> </ul>"},{"location":"release-notes/common/","title":"Release notes for Common library","text":""},{"location":"release-notes/common/#021","title":"&gt; 0.2.1","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary","title":"Summary","text":"<p>This PR adds support for a new settings type to support the service dependency sync feature.</p>"},{"location":"release-notes/common/#changes","title":"Changes","text":"<ul> <li>feat: service dependency sync</li> </ul>"},{"location":"release-notes/common/#020","title":"&gt; 0.2.0","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_1","title":"Summary","text":"<p>This release adds type support for multi-account configuration for all aspects of the PagerDuty plugin for Backstage:</p> <ul> <li> <p>UI Components:</p> </li> <li> <p><code>PagerDutyCard</code></p> </li> <li> <p><code>PagerDutySmallCard</code></p> </li> <li> <p>Entity Mapping Page</p> </li> <li>Entity Processor</li> <li>Scaffolder Action</li> </ul> <p>With these changes users with multiple PagerDuty accounts can now configure their services in the same Backstage instance.</p>"},{"location":"release-notes/common/#changes_1","title":"Changes","text":"<ul> <li>feat: add account field to PagerDuty types</li> <li>chore(deps): Bump @azure/identity from 4.0.0 to 4.3.0</li> <li>chore(deps): Bump braces from 3.0.2 to 3.0.3</li> </ul>"},{"location":"release-notes/common/#015","title":"&gt; 0.1.5","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_2","title":"Summary","text":"<p>This release adds support for entity mapping types to be used by processor, backend and frontend components for easy service mapping between Backstage and PagerDuty services.</p>"},{"location":"release-notes/common/#changes_2","title":"Changes","text":"<ul> <li>feat: adding support for entity mapping types</li> <li>chore(deps): Bump ws from 8.16.0 to 8.17.1</li> </ul>"},{"location":"release-notes/common/#014","title":"&gt; 0.1.4","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_3","title":"Summary","text":"<p>This release introduces a new type to support pagination when listing all services in PagerDuty.</p>"},{"location":"release-notes/common/#changes_3","title":"Changes","text":"<ul> <li>feat: add support for service listing</li> <li>chore(deps): Bump tar from 6.2.0 to 6.2.1</li> </ul>"},{"location":"release-notes/common/#013","title":"&gt; 0.1.3","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_4","title":"Summary","text":"<p>This release introduces a couple of security patches related to dependencies.</p> <ul> <li>express</li> <li>webpack-dev-middleware</li> </ul>"},{"location":"release-notes/common/#changes_4","title":"Changes","text":"<ul> <li>build(deps): Bump webpack-dev-middleware from 5.3.3 to 5.3.4</li> <li>build(deps): Bump express from 4.18.2 to 4.19.2</li> </ul>"},{"location":"release-notes/common/#012","title":"&gt; 0.1.2","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_5","title":"Summary","text":"<p>This release introduces new types to support the new PagerDutyCard UI that requires Service Standards, Service Status and Service Metrics.</p>"},{"location":"release-notes/common/#changes_5","title":"Changes","text":"<ul> <li>chore(deps): Bump follow-redirects from 1.15.5 to 1.15.6</li> <li>feat: add types to support updated UI</li> </ul>"},{"location":"release-notes/common/#011","title":"&gt; 0.1.1","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_6","title":"Summary","text":"<p>This release introduces a security patch to a third-party dependency.</p>"},{"location":"release-notes/common/#changes_6","title":"Changes","text":"<ul> <li>build(deps): Bump ip from 2.0.0 to 2.0.1</li> </ul>"},{"location":"release-notes/common/#010","title":"&gt; 0.1.0","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_7","title":"Summary","text":"<p>Release 0.1.0 adds the type necessary for OAuth support in Backstage plugin configuration. With this new type users will be able to configure the following OAuth parameters in Backstage <code>app-config.yaml</code> file.</p> <pre><code>pagerDuty:\n  oauth:\n    clientId: ${PD_CLIENT_ID}\n    clientSecret: ${PD_CLIENT_SECRET}\n    subDomain: ${PD_ACCOUNT_SUBDOMAIN}\n    region: ${PD_ACCOUNT_REGION}           // Optional. allowed values: 'us', 'eu'. Defaults to 'us'.\n</code></pre>"},{"location":"release-notes/common/#changes_7","title":"Changes","text":"<ul> <li>feat: adds type to allow OAuth support</li> </ul>"},{"location":"release-notes/common/#002","title":"&gt; 0.0.2","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_8","title":"Summary","text":"<p>Version 0.0.2 introduces a fix for a configuration issue that was forcing the backend component to load the common library as an ES6 module which is not yet fully supported in Backstage backend components.</p>"},{"location":"release-notes/common/#changes_8","title":"Changes","text":"<ul> <li>fix: update package publishing configuration</li> </ul>"},{"location":"release-notes/common/#001","title":"&gt; 0.0.1","text":"<p>GitHub release</p>"},{"location":"release-notes/common/#summary_9","title":"Summary","text":"<p>This release introduces a common package that contains <code>types</code> and <code>constants</code> to be used by Backstage backend and frontend plugins. This allows us to maintain consistency between types across plugins.</p>"},{"location":"release-notes/common/#constants","title":"Constants","text":"<ul> <li><code>PAGERDUTY_INTEGRATION_KEY</code> maps to 'pagerduty.com/integration-key' annotation</li> <li><code>PAGERDUTY_SERVICE_ID</code> maps to 'pagerduty.com/service-id' annotation</li> </ul>"},{"location":"release-notes/common/#types","title":"Types","text":"<ul> <li><code>PagerDutyIncident</code></li> <li><code>PagerDutyService</code></li> <li><code>PagerDutyUser</code></li> <li><code>PagerDutyChangeEvent</code></li> <li><code>PagerDutyEscalationPolicy</code></li> <li><code>PagerDutyIncidentUrgencyRule</code></li> <li><code>PagerDutyIntegration</code></li> <li><code>PagerDutyTeam</code></li> <li><code>PagerDutyOnCall</code></li> <li><code>PagerDutyVendor</code></li> <li><code>PagerDutyOnCallsResponse</code></li> <li><code>PagerDutyOnCallUsersResponse</code></li> <li><code>PagerDutyServiceResponse</code></li> <li><code>PagerDutyServicesResponse</code></li> <li><code>PagerDutyIncidentsResponse</code></li> <li><code>PagerDutyChangeEventsResponse</code></li> <li><code>PagerDutyIntegrationResponse</code></li> <li><code>PagerDutyEscalationPoliciesResponse</code></li> <li><code>PagerDutyAbilitiesResponse</code></li> </ul>"},{"location":"release-notes/entity-processor/","title":"Release notes for Entity Processor module","text":""},{"location":"release-notes/entity-processor/#031","title":"&gt; 0.3.1","text":"<p>GitHub release</p>"},{"location":"release-notes/entity-processor/#summary","title":"Summary","text":"<p>Release 0.3.1 removes a limitation that prevented users from enabling PagerDuty as their main source for syncing service dependencies.</p> <p>With the help of the Backstage team, we were able to implement a few changes that overcome this limitation and users are now able to set PagerDuty as their main source for service dependencies and get their dependencies sync to Backstage for all mapped entities.</p>"},{"location":"release-notes/entity-processor/#changes","title":"Changes","text":"<ul> <li>feat: enable pagerduty service dependency sync</li> </ul>"},{"location":"release-notes/entity-processor/#dependencies","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.1</code></li> </ul>"},{"location":"release-notes/entity-processor/#030","title":"&gt; 0.3.0","text":"<p>GitHub release</p>"},{"location":"release-notes/entity-processor/#summary_1","title":"Summary","text":"<p>This release introduces support for service dependency syncing and automatically creating Backstage integrations in PagerDuty for all new mappings.</p> <p>With these changes, we are reducing the manual effort on configuring integration keys and service dependencies into Backstage configuration files and ensuring they stay in-sync with PagerDuty.</p> <p>\u203c\ufe0f Important: Due to a Backstage design decision it is not possible to fully overwrite the relations specified in each entity's configuration file. For that reason the option to synchronise strictly from PagerDuty side is not available.</p>"},{"location":"release-notes/entity-processor/#changes_1","title":"Changes","text":"<ul> <li>refactor: removing PagerDuty sync to limitation in Backstage</li> <li>chore: updating backstage plugin config</li> <li>feat: service dependency sync</li> </ul>"},{"location":"release-notes/entity-processor/#dependencies_1","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.1</code></li> </ul>"},{"location":"release-notes/entity-processor/#021","title":"&gt; 0.2.1","text":"<p>GitHub release</p>"},{"location":"release-notes/entity-processor/#summary_2","title":"Summary","text":"<p>This release fixes an issue with the missing plugin config schema. Without it the Backstage instance will not load.</p>"},{"location":"release-notes/entity-processor/#changes_2","title":"Changes","text":"<ul> <li>fix: add missing config schema</li> </ul>"},{"location":"release-notes/entity-processor/#dependencies_2","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/entity-processor/#020","title":"&gt; 0.2.0","text":"<p>GitHub release</p>"},{"location":"release-notes/entity-processor/#summary_3","title":"Summary","text":"<p>This PR adds multi-account support on entity processor. Now if the <code>account</code> property exists in the database for the mapped entity it will get added as an annotation to the Backstage entity.</p>"},{"location":"release-notes/entity-processor/#changes_3","title":"Changes","text":"<ul> <li>feat: add support for multi account</li> </ul>"},{"location":"release-notes/entity-processor/#dependencies_3","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/entity-processor/#010","title":"&gt; 0.1.0","text":"<p>GitHub release</p>"},{"location":"release-notes/entity-processor/#summary_4","title":"Summary","text":"<p>This release introduces entity processor capabilities to PagerDuty plugin for Backstage which will allow users to automatically update the entity configuration files according to the setting defined in the new PagerDuty page.</p> <p>This features makes it easier to map existing PagerDuty services into Backstage entities.</p>"},{"location":"release-notes/entity-processor/#changes_4","title":"Changes","text":"<ul> <li>release: 0.1.0</li> </ul>"},{"location":"release-notes/entity-processor/#dependencies_4","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: 0.1.5</code></li> </ul>"},{"location":"release-notes/frontend/","title":"Release notes for Frontend plugin","text":""},{"location":"release-notes/frontend/#0151","title":"&gt; 0.15.1","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary","title":"Summary","text":"<p>This release enables the <code>PagerDuty</code> option in the PagerDutyPage component settings which allows users to set PagerDuty as their main source for syncing service dependencies to Backstage.</p> <p>This feature was disabled due to a limitation on version 0.3.0 of <code>@pagerduty/backstage-plugin-entity-processor</code> which is now fixed and released on version 0.3.1.</p>"},{"location":"release-notes/frontend/#changes","title":"Changes","text":"<ul> <li>refactor: enable PagerDuty option on PagerDutyPage</li> </ul>"},{"location":"release-notes/frontend/#dependencies","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: 0.9.0</code></li> <li><code>@pagerduty/backstage-plugin-common: 0.2.1</code></li> <li><code>@pagerduty/backstage-plugin-entity-provider: 0.3.1</code></li> </ul>"},{"location":"release-notes/frontend/#0150","title":"&gt; 0.15.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_1","title":"Summary","text":"<p>This release updates the <code>PagerDutyPage</code> component to add a new configurations tab where users can configure how they want to sync service dependencies between Backstage and PagerDuty.</p> <p></p> <p>By default, service dependency syncing is disabled. It's an opt-in feature and admins need to be aware of what it does because you might end up deleting existing service dependencies on Backstage or PagerDuty.</p> <p>\u203c\ufe0f Important: Due to a Backstage design decision it is not possible to fully overwrite the relations specified in each entity's configuration file. For that reason the option to synchronise strictly from PagerDuty side is not available.</p> <p>On this release we also introduced a fix that was preventing users from showing/hiding columns on the service to entity mapping table.</p>"},{"location":"release-notes/frontend/#changes_1","title":"Changes","text":"<ul> <li>refactor: disabled PagerDuty option due to a design limitation on Backstage</li> <li>fix: turned columnvisibility into a static object</li> <li>feat: service dependency sync</li> </ul>"},{"location":"release-notes/frontend/#dependencies_1","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: 0.9.0</code></li> <li><code>@pagerduty/backstage-plugin-common: 0.2.1</code></li> </ul>"},{"location":"release-notes/frontend/#0141","title":"&gt; 0.14.1","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_2","title":"Summary","text":"<p>This release refactors areas where JSON.parse was used in unsafe code which leaves the potential for unexpected exceptions.</p> <p>It also bumps Backstage package versions and fixes a high severity security issue on a 3rd party dependency.</p>"},{"location":"release-notes/frontend/#changes_2","title":"Changes","text":"<ul> <li>chore(deps): bump fast-loops from 1.1.3 to 1.1.4</li> <li>chore: remove json parse from unsafe code</li> </ul>"},{"location":"release-notes/frontend/#dependencies_2","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: 0.8.0</code></li> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/frontend/#0140","title":"&gt; 0.14.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_3","title":"Summary","text":"<p>Release 0.14.0 introduces support for multi-account configuration. With this release, admins will be able to specify multiple PagerDuty accounts in the same Backstage instance. Support was added across all the components of the plugin:</p> <ul> <li>Backend: All API routes exposed take account as an optional parameter so you can create and query information from different PagerDuty Accounts. If admins leverage the Entity Mapping feature, the account is now persisted into the plugin database.</li> <li>Scaffolder Actions: When the scaffolder action is used on a template it now lists Escalation Policies from all accounts configured so the user can easily select the one they want. The Scaffolder action also outputs the account so it can be replaced in the <code>app-config.yaml</code> annotations.</li> <li>Entity Processor: If an entity mapping stored in the plugin database contains the <code>account</code> property, the processor will add an annotation to the entity with its information.</li> </ul> <p>This release solves an existing problem for many large organizations that have several PagerDuty accounts for segregation purposes or that result from company acquisitions.</p>"},{"location":"release-notes/frontend/#changes_3","title":"Changes","text":"<ul> <li>feat: add support for multi-account</li> </ul>"},{"location":"release-notes/frontend/#dependencies_3","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: 0.8.0</code></li> <li><code>@pagerduty/backstage-plugin-common: 0.2.0</code></li> </ul>"},{"location":"release-notes/frontend/#0130","title":"&gt; 0.13.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_4","title":"Summary","text":"<p>Release 0.13.0 introduces a <code>PagerDutyPage</code> component which can be added to your Backstage menu and allows users to explore advanced PagerDuty configurations. With this release we are adding support for Entity mapping which allows users to easily map existing PagerDuty services to Backstage entities without requiring updates to each service config file.</p> <p>Below is an example of how the <code>PagerDutyPage</code> looks like when added to a Backstage instance.</p> <p></p> <p>Users will be able to see if the entity definition is up to date with the configuration in file or not and chose to persist the changes by manually creating a PR in the source code.</p> <p>This release also applies a few security patches related to Backstage dependencies.</p>"},{"location":"release-notes/frontend/#changes_4","title":"Changes","text":"<ul> <li>docs: update readme with mapping capability</li> <li>feat: advanced config page</li> <li>chore(deps): bump ws from 8.14.2 to 8.17.1</li> </ul>"},{"location":"release-notes/frontend/#dependencies_4","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: 0.7.0</code></li> <li><code>@pagerduty/backstage-plugin-common: 0.1.5</code></li> </ul>"},{"location":"release-notes/frontend/#0122","title":"&gt; 0.12.2","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_5","title":"Summary","text":"<p>This release includes a security patch and a bug fix that was allowing users to create incidents without defining the description of incidents after they created the first one. The state of the description property is now being cleaned up on successful incident creation.</p>"},{"location":"release-notes/frontend/#changes_5","title":"Changes","text":"<ul> <li>chore(deps): bump braces from 3.0.2 to 3.0.3</li> <li>fix: ensures incident description state is cleaned after an incident is triggered</li> </ul>"},{"location":"release-notes/frontend/#dependencies_5","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: ^0.5.1</code></li> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/frontend/#0121","title":"&gt; 0.12.1","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_6","title":"Summary","text":"<p>Version 0.12.1 updates all backstage dependencies to the latest version. The PR that originated this version was created based on customer request to update @backstage/core-components to version 0.14 (#102).</p> <p>We decided to use this opportunity to upgrade all packages (see list of upgraded packages below).</p> <p>Dependencies:</p> <ul> <li>@backstage/catalog-model</li> <li>@backstage/core-components</li> <li>@backstage/core-plugin-api</li> <li>@backstage/errors</li> <li>@backstage/plugin-catalog-react</li> <li>@backstage/plugin-home-react</li> <li>@backstage/theme</li> </ul> <p>DevDependencies:</p> <ul> <li>@backstage/cli</li> <li>@backstage/core-app-api</li> <li>@backstage/dev-utils</li> <li>@backstage/test-utils</li> </ul>"},{"location":"release-notes/frontend/#changes_6","title":"Changes","text":"<ul> <li>chore: upgrade backstage/core components to version 0.14</li> <li>fix: correct client test case description</li> </ul>"},{"location":"release-notes/frontend/#dependencies_6","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: ^0.5.1</code></li> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/frontend/#0120","title":"&gt; 0.12.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_7","title":"Summary","text":"<p>This release introduces a new UI component - <code>PagerDutySmallCard</code> - which allows users to still have visibility on the status of their PagerDuty services in Backstage without using so much screen space. This new UI component removes information on incidents and recent changes, and moves insights and on call information to collapsable panels that can optionally be removed.</p> <p></p> <p>This feature was initially contributed by @milenkotomic and slightly modify after feedback from other community members.</p>"},{"location":"release-notes/frontend/#changes_7","title":"Changes","text":"<ul> <li>feat: small sized PagerDutyCard component</li> <li>chore(deps): bump tar from 6.2.0 to 6.2.1</li> </ul>"},{"location":"release-notes/frontend/#dependencies_7","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: ^0.5.1</code></li> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/frontend/#0110","title":"&gt; 0.11.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_8","title":"Summary","text":"<p>This release introduces a few minor changes and fixes that were part of our roadmap.</p> <ul> <li> <p>Users are now able to hide the on-call section We introduced a new parameter on the <code>PagerDutyCard</code> entity that allows users to completely hide the on-call information section. This feature was mentioned by a few customers and now it is available through an opt-in mechanism.</p> <pre><code>&lt;EntitySwitch&gt;\n  &lt;EntitySwitch.Case if={isPagerDutyAvailable}&gt;\n    &lt;Grid item md={12}&gt;\n      &lt;EntityPagerDutyCard disableOnCall /&gt;\n    &lt;/Grid&gt;\n  &lt;/EntitySwitch.Case&gt;\n&lt;/EntitySwitch&gt;\n</code></pre> </li> <li> <p>Creating an incident is now hidden by default when <code>integration-key</code> is missing Previously the button to create a new incident was disabled if the <code>integration-key</code> configuration was not defined. We have changed that behaviour to completely remove the button from the card as it was causing confusion according to some customers we interviewed.</p> </li> <li> <p>Added documentation on how to disable the change events tab The <code>PagerDutyCard</code> component already had the capability to completely hide the change events tab by using the <code>disableChangeEvents</code> property but this feature was not documented. This information is now part of the official plugin documentation.</p> <pre><code>&lt;EntitySwitch&gt;\n  &lt;EntitySwitch.Case if={isPagerDutyAvailable}&gt;\n    &lt;Grid item md={12}&gt;\n      &lt;EntityPagerDutyCard disableChangeEvents /&gt;\n    &lt;/Grid&gt;\n  &lt;/EntitySwitch.Case&gt;\n&lt;/EntitySwitch&gt;\n</code></pre> </li> </ul>"},{"location":"release-notes/frontend/#changes_8","title":"Changes","text":"<ul> <li>feat: hide on-call information</li> <li>feat: hide trigger incident on missing integration key</li> <li>chore(deps): bump express from 4.18.2 to 4.19.2</li> <li>chore(deps): bump webpack-dev-middleware from 5.3.3 to 5.3.4</li> </ul>"},{"location":"release-notes/frontend/#dependencies_8","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: ^0.5.1</code></li> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/frontend/#0100","title":"&gt; 0.10.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_9","title":"Summary","text":"<p>This release introduces a new UI to the PagerDutyCard that is used on each Entity Page. This new UI introduces:</p> <ul> <li>official PagerDuty logo</li> <li>clear visibility on incident status and urgency</li> <li>service status</li> <li>service standards</li> <li>visibility on service metrics (total incidents, high urgency incidents, total number of interruptions)</li> <li>escalation policy information on the on-call section</li> </ul> <p>This release also updates the behaviour of some components from the PagerDutyCard.</p> <ul> <li>the button to contact the on-call user by email is now removed</li> <li>the \"create incident\" button is now completely hidden in case of <code>read-only</code> mode, instead of just disabling the button.</li> </ul> <p></p> <p>For Scoped OAuth users \ud83d\udc49 This release requires you to add additional scopes to your App Registration in PagerDuty: <code>analytics.read</code> and <code>standards.read</code>.</p>"},{"location":"release-notes/frontend/#changes_9","title":"Changes","text":"<ul> <li>chore(deps): bump follow-redirects from 1.15.4 to 1.15.6</li> <li>style: refresh PagerDutyCard UI</li> </ul>"},{"location":"release-notes/frontend/#dependencies_9","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-backend: ^0.5.1</code></li> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/frontend/#093","title":"&gt; 0.9.3","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_10","title":"Summary","text":"<p>This release removes the <code>pagerDuty.apiToken</code> and <code>pagerDuty.oauth</code> configuration definitions from this repository as they should be treated as secret config and this frontend plugin does not need to know about them.</p> <p>These configurations will now be exclusive to the backend plugin.</p>"},{"location":"release-notes/frontend/#changes_10","title":"Changes","text":"<ul> <li>fix: remove config definitions that are secret</li> </ul>"},{"location":"release-notes/frontend/#092","title":"&gt; 0.9.2","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_11","title":"Summary","text":"<p>This release resolves an issue reported in backstage-plugin (#74) which prevents users from overriding the REST API base url (e.g. for EU based accounts). This feature was possible through the Backstage proxy configuration.</p> <p>With this, users will be able to add a new configuration to the PagerDuty plugin in <code>app-config.yaml</code> like the example below.</p> <pre><code>pagerDuty:\n  apiBaseUrl: https://api.eu.pagerduty.com     #defaults to https://api.pagerduty.com\n</code></pre> <p>This feature in mainly implemented in <code>@pagerduty/backstage-plugin-backend</code> but this release updates the plugin config schema accordingly.</p>"},{"location":"release-notes/frontend/#changes_11","title":"Changes","text":"<ul> <li>fix: updating config schema to allow overriding of api base url</li> </ul>"},{"location":"release-notes/frontend/#091","title":"&gt; 0.9.1","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_12","title":"Summary","text":"<p>This release introduces a security patch to a third-party dependency.</p>"},{"location":"release-notes/frontend/#changes_12","title":"Changes","text":"<ul> <li>build(deps): Bump ip from 2.0.0 to 2.0.1</li> </ul>"},{"location":"release-notes/frontend/#090","title":"&gt; 0.9.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_13","title":"Summary","text":"<p>This release adds the type necessary for OAuth support in Backstage plugin configuration. Users can now configure the following OAuth parameters in Backstage <code>app-config.yaml</code> file.</p> <pre><code>pagerDuty:\n  oauth:\n    clientId: ${PD_CLIENT_ID}\n    clientSecret: ${PD_CLIENT_SECRET}\n    subDomain: ${PD_ACCOUNT_SUBDOMAIN}\n    region: ${PD_ACCOUNT_REGION}           // Optional. allowed values: 'us', 'eu'. Defaults to 'us'.\n</code></pre> <p>It also introduces more friendly error messages when permissions for certain APIs or operations are not present. This was implemented not to break the PagerDuty Card experience.</p>"},{"location":"release-notes/frontend/#changes_13","title":"Changes","text":"<ul> <li>feat: add suport for Scope OAuth</li> <li>fix: update error links to PagerDuty docs</li> </ul>"},{"location":"release-notes/frontend/#083","title":"&gt; 0.8.3","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_14","title":"Summary","text":"<p>Version 0.8.3 fixes an issue that was causing an error message to show on-screen for user accounts that don't have AIOPs or Event Intelligence capabilities.</p> <p></p> <p>With this changes instead of getting an out-of-context error message users will see this image and message instead.</p> <p></p>"},{"location":"release-notes/frontend/#changes_14","title":"Changes","text":"<ul> <li>refactor: improve error handling on client side for change events</li> </ul>"},{"location":"release-notes/frontend/#082","title":"&gt; 0.8.2","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_15","title":"Summary","text":"<p>Version 0.8.2 bumps the version of <code>@pagerduty/backstage-plugin-common</code> to version 0.0.2.</p> <p>Version 0.0.1 had a misconfiguration that was forcing the backend plugin to load it as an ES6 module and while that's supported for the frontend it is not yet fully supported for backend plugins.</p> <p>This dependency upgrade syncs the version of the common package between frontend and backend plugins.</p>"},{"location":"release-notes/frontend/#changes_15","title":"Changes","text":"<ul> <li>chore(deps): bumping up common package version to latest</li> </ul>"},{"location":"release-notes/frontend/#081","title":"&gt; 0.8.1","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_16","title":"Summary","text":"<p>This minor release moves the direct REST API calls from the frontend component to the backend. Instead of leveraging the Backstage proxy to make direct API calls to PagerDuty the calls are made to the backend plugin instead.</p> <p>This removes the dependency on the proxy and prevents other plugins from using the PagerDuty proxy configuration to call PagerDuty APIs directly for other purposes which raises few security concerns.</p> <p>Therefore the proxy configuration for PagerDuty on app-config.yaml is no longer required and is in-fact deprecated.</p>"},{"location":"release-notes/frontend/#changes_16","title":"Changes","text":"<ul> <li>feat: migrate api calls</li> <li>chore(deps): bump follow-redirects from 1.15.3 to 1.15.4</li> </ul>"},{"location":"release-notes/frontend/#074","title":"&gt; 0.7.4","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_17","title":"Summary","text":"<p>This release includes a fix to a bug that prevented the PagerDutyCard from refreshing when users leveraged the Backstage search to navigate between components.</p>"},{"location":"release-notes/frontend/#bug-fixes","title":"\ud83d\udc1b Bug fixes","text":"<ul> <li>fix: component now refreshes when navigating between components from Search</li> </ul>"},{"location":"release-notes/frontend/#073","title":"&gt; 0.7.3","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_18","title":"Summary","text":"<p>This release updates the Backstage plugin configuration schema to add support for <code>apiToken</code>.</p> <pre><code>pagerDuty:\n   apiToken: u+a81u12y4ax\n</code></pre> <p>The latest release of the backend plugin (0.2.0) required a schema change for the plugin to start successfully. It does not introduce new features or capabilities to this plugin but it makes sure that the schemas match and avoid misconfigurations.</p>"},{"location":"release-notes/frontend/#maintenance","title":"\ud83d\udd27 Maintenance","text":"<ul> <li>chore(schema): updated config schema to match backend plugin</li> </ul>"},{"location":"release-notes/frontend/#072","title":"&gt; 0.7.2","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_19","title":"Summary","text":"<p>This release fixes an issue that prevented the installation of the plugin if the Backstage React version was not compatible with the plugin version. It also fixes a moderate security issue, adds support for React 18+ and bumps up the versions of Backstage packages.</p>"},{"location":"release-notes/frontend/#maintenance_1","title":"\ud83d\udd27 Maintenance","text":"<ul> <li>chore(deps): add support for React 18+ (#43)</li> <li>chore(deps): bump up Backstage versions (#44)</li> <li>docs: Simplify readme file and point to full documentation (#47)</li> <li>chore(deps): bump @adobe/css-tools from 4.3.1 to 4.3.2</li> <li>fix: move strict dependencies</li> </ul>"},{"location":"release-notes/frontend/#071","title":"&gt; 0.7.1","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_20","title":"Summary","text":"<p>With release 0.7.1 we have fixed some issues and added new capabilities to the oncall user list.</p> <ul> <li>List only users in escalation level 1 - these are the users that are actually oncall.</li> <li>Remove duplicate users from the oncall user list</li> <li>Add support for user profile picture and fallback to dummy avatar icon when an image is not provided.</li> </ul>"},{"location":"release-notes/frontend/#minor-changes","title":"\ud83c\udf1f Minor Changes","text":"<ul> <li>fix: list only oncall users in plugin</li> </ul>"},{"location":"release-notes/frontend/#070","title":"&gt; 0.7.0","text":"<p>GitHub release</p>"},{"location":"release-notes/frontend/#summary_21","title":"Summary","text":"<p>This release marks the first version under PagerDuty's ownership of the Backstage plugin. You will not notice any major changes. Here's what we did:</p> <ul> <li>Fixed a bug that was preventing recent changes tab to show</li> <li>Removed double headers on plugin UI component for incidents and recent changes</li> <li>Patched potential security vulnerabilities on dependencies</li> </ul>"},{"location":"release-notes/frontend/#maintenance_2","title":"\ud83d\udd27 Maintenance","text":"<ul> <li>chore(deps): bump zod from 3.22.2 to 3.22.4</li> <li>chore(deps): bump browserify-sign from 4.2.1 to 4.2.2</li> <li>chore(deps): bump @babel/traverse from 7.22.20 to 7.23.2</li> <li>chore(deps): bump postcss from 8.4.29 to 8.4.31</li> <li>chore(ci): adding release drafter with config</li> <li>chore(deps)Bump graphql from 16.8.0 to 16.8.1</li> <li>chore(ci): adding github action to publish package on new release</li> <li>chore(docs): adding CODEOWNERS</li> <li>chore(ci): changing release step to trigger on pr close and merge</li> <li>chore(ci): forcing npm registry by default</li> <li>chore(ci): Build and publish package to npm</li> </ul>"},{"location":"release-notes/frontend/#minor-changes_1","title":"\ud83c\udf1f Minor Changes","text":"<ul> <li>fix(ui): Removing sub-headers from lists</li> </ul>"},{"location":"release-notes/scaffolder-actions/","title":"Release notes for Scaffolder Actions module","text":""},{"location":"release-notes/scaffolder-actions/#020","title":"&gt; 0.2.0","text":"<p>GitHub release</p>"},{"location":"release-notes/scaffolder-actions/#summary","title":"Summary","text":"<p>This PR adds support for multi-account configuration to scaffolder actions. It introduces no changes for the end user and adapts to the configuration set in <code>app-config.yaml</code>. If multiple accounts are configured the user will see the list of all Escalation Policies in all accounts with the reference to it's source account.</p> <p></p> <p>At creation time, the scaffolder will select the correct account to deploy the service to depending on the select escalation policy/account pair selected.</p>"},{"location":"release-notes/scaffolder-actions/#changes","title":"Changes","text":"<ul> <li>feat: add support for multi accounts</li> <li>chore(deps): Bump mysql2 from 3.9.2 to 3.9.7</li> <li>chore(deps): Bump mysql2 from 3.9.7 to 3.10.0</li> </ul>"},{"location":"release-notes/scaffolder-actions/#dependencies","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.2.0</code></li> </ul>"},{"location":"release-notes/scaffolder-actions/#012","title":"&gt; 0.1.2","text":"<p>GitHub release</p>"},{"location":"release-notes/scaffolder-actions/#summary_1","title":"Summary","text":"<p>This release updates the <code>moduleId</code> to a PagerDuty specific one (<code>pagerduty-actions</code>). The <code>moduleId</code> configured on the initial release (<code>custom-extensions</code>) conflicts with the example value from the backstage documentation for writing custom actions.</p>"},{"location":"release-notes/scaffolder-actions/#changes_1","title":"Changes","text":"<ul> <li>fix: use pagerduty-specific moduleId</li> </ul>"},{"location":"release-notes/scaffolder-actions/#dependencies_1","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/scaffolder-actions/#011","title":"&gt; 0.1.1","text":"<p>GitHub release</p>"},{"location":"release-notes/scaffolder-actions/#summary_2","title":"Summary","text":"<p>This release introduces a small improvement to the migration process to the new backend system. With the change introduced we made the <code>createPagerDutyServiceAction</code> parameters optional and therefore existing users just need to update the package reference in <code>packages/backend/src/plugins/scaffolders.ts</code>.</p>"},{"location":"release-notes/scaffolder-actions/#changes_2","title":"Changes","text":"<ul> <li>refactor: refactor to avoid additional parameters</li> </ul>"},{"location":"release-notes/scaffolder-actions/#dependencies_2","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"},{"location":"release-notes/scaffolder-actions/#010","title":"&gt; 0.1.0","text":"<p>GitHub release</p>"},{"location":"release-notes/scaffolder-actions/#summary_3","title":"Summary","text":"<p>Version 0.1.0 of <code>@pagerduty/backstage-plugin-scaffolder-actions</code> represents the first release of this new Backstage backend module. </p> <p>Before version 0.6.0 of <code>@pagerduty/backstage-plugin-backend</code>, which introduces support for Backstage's new backend system, both REST APIs and Scaffolder actions were part of the same package.</p> <p>By adding support for the new backend system, we were forced to isolate the existing Scaffolder Actions in a separate package. Below are the steps to onboard this new package to your Backstage App.</p> <p>For existing users using the legacy backend system</p> <ol> <li> <p>Install new package</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-scaffolder-actions\nyarn install\n</code></pre> </li> <li> <p>Update your existing reference in <code>packages/backend/src/plugins/scaffolder.ts</code> from the backend component to the new one</p> <pre><code>import { createPagerDutyServiceAction } from '@pagerduty/backstage-plugin-scaffolder-actions';\n</code></pre> </li> <li> <p>Pass the environment config and logger to <code>createPagerDutyServiceAction</code></p> <pre><code>  const actions = [\n     ...builtInActions, \n     createPagerDutyServiceAction({ \n          config: env.config, \n          logger: env.logger \n     })\n  ];\n</code></pre> </li> </ol> <p>For users using the new backend system</p> <ol> <li> <p>Install new package</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-scaffolder-actions\nyarn install\n</code></pre> </li> <li> <p>(Optional) If this is the first time configuring PagerDuty's plugin you also need the following packages</p> <pre><code>yarn add --cwd packages/backend @pagerduty/backstage-plugin-backend @pagerduty/backstage-plugin-common\nyarn install\n</code></pre> </li> <li> <p>Add the package to your backend in <code>packages/backend/src/index.ts</code></p> <pre><code>// PagerDuty backend plugin\nbackend.add(import('@pagerduty/backstage-plugin-backend'));\n\n// PagerDuty Scaffolder Actions Module\nbackend.add(import('@pagerduty/backstage-plugin-scaffolder-actions'));\n</code></pre> </li> </ol>"},{"location":"release-notes/scaffolder-actions/#changes_3","title":"Changes","text":"<ul> <li>chore: extract scaffolder actions from <code>@pagerduty/backstage-plugin-backend</code></li> <li>chore(deps): Bump tar from 6.2.0 to 6.2.1</li> </ul>"},{"location":"release-notes/scaffolder-actions/#dependencies_3","title":"Dependencies","text":"<ul> <li><code>@pagerduty/backstage-plugin-common: ^0.1.2</code></li> </ul>"}]}